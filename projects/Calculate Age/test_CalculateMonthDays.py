# ********RoostGPT********
"""
Test generated by RoostGPT for test Python-5768-test3 using AI Type  and AI Model 

ROOST_METHOD_HASH=month_days_1396fdc0ba
ROOST_METHOD_SIG_HASH=month_days_5dd3c5e333


### Scenario 1: Test for months with 31 days
Details:
  TestName: test_month_with_31_days
  Description: This test verifies that the function correctly returns 31 days for months that traditionally have 31 days, regardless of whether the year is a leap year or not.
Execution:
  Arrange: N/A (No setup required)
  Act: Call month_days for each month that should have 31 days (January, March, May, July, August, October, December) with both leap year and non-leap year flags.
  Assert: Verify that the function returns 31 for each call.
Validation:
  Rationalize: Ensuring the function returns 31 days for these months aligns with standard Gregorian calendar rules, and is crucial for applications relying on accurate date calculations.

### Scenario 2: Test for months with 30 days
Details:
  TestName: test_month_with_30_days
  Description: This test checks if the function returns 30 days for months that typically have 30 days, independent of leap year status.
Execution:
  Arrange: N/A
  Act: Call month_days for each month that should have 30 days (April, June, September, November) with both leap year and non-leap year flags.
  Assert: Confirm that the function returns 30 for each call.
Validation:
  Rationalize: Correctly returning 30 days for these months is essential for maintaining consistency with the standard calendar, impacting any temporal calculations or operations in dependent systems.

### Scenario 3: Test for February in a leap year
Details:
  TestName: test_february_in_leap_year
  Description: This test ensures that the function returns 29 days for February when the provided year is a leap year.
Execution:
  Arrange: N/A
  Act: Call month_days with month set to 2 and leap_year set to True.
  Assert: Check that the function returns 29.
Validation:
  Rationalize: It's vital to verify leap year functionality as it has a direct impact on date-related logic in leap years, ensuring that February is handled correctly.

### Scenario 4: Test for February in a non-leap year
Details:
  TestName: test_february_in_non_leap_year
  Description: Tests if the function returns 28 days for February during a non-leap year.
Execution:
  Arrange: N/A
  Act: Call month_days with month set to 2 and leap_year set to False.
  Assert: Verify the function returns 28.
Validation:
  Rationalize: This test confirms the function's ability to correctly handle the standard scenario for February in non-leap years, crucial for accurate date management and operations.

### Scenario 5: Test for invalid month input
Details:
  TestName: test_invalid_month_input
  Description: Checks the function's behavior when an invalid month number is provided.
Execution:
  Arrange: N/A
  Act: Call month_days with an invalid month number (e.g., 0, 13).
  Assert: The function should ideally handle this gracefully, possibly by raising an error or returning a default value.
Validation:
  Rationalize: Ensuring robustness of the function includes handling unexpected or erroneous inputs. This test will help ensure that the function behaves predictably even in error scenarios.
"""

# ********RoostGPT********
import pytest
import time
from calendar import isleap
from Calculate_Age.calculate import month_days

class Test_CalculateMonthDays:
    @pytest.mark.positive
    def test_month_with_31_days(self):
        months_with_31_days = [1, 3, 5, 7, 8, 10, 12]
        for month in months_with_31_days:
            assert month_days(month, True) == 31
            assert month_days(month, False) == 31

    @pytest.mark.positive
    def test_month_with_30_days(self):
        months_with_30_days = [4, 6, 9, 11]
        for month in months_with_30_days:
            assert month_days(month, True) == 30
            assert month_days(month, False) == 30

    @pytest.mark.positive
    def test_february_in_leap_year(self):
        assert month_days(2, True) == 29

    @pytest.mark.positive
    def test_february_in_non_leap_year(self):
        assert month_days(2, False) == 28

    @pytest.mark.negative
    @pytest.mark.parametrize("invalid_month", [0, 13, -1, 100])
    def test_invalid_month_input(self, invalid_month):
        with pytest.raises(ValueError):
            month_days(invalid_month, False)
        with pytest.raises(ValueError):
            month_days(invalid_month, True)
