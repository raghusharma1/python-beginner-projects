# ********RoostGPT********
"""
Test generated by RoostGPT for test Python-5768-test3 using AI Type  and AI Model 

ROOST_METHOD_HASH=month_days_1396fdc0ba
ROOST_METHOD_SIG_HASH=month_days_5dd3c5e333


### Test Scenarios for the `month_days` Function

#### Scenario 1: Test month with 31 days
Details:
  TestName: test_month_with_31_days
  Description: Verify that the function correctly returns 31 days for months that traditionally have 31 days.
Execution:
  Arrange: No special setup required.
  Act: Call `month_days` with the month parameter set to one of the months with 31 days (e.g., January which is month 1).
  Assert: Check that the return value is 31.
Validation:
  This test validates the function's ability to correctly identify and return the number of days for months that have 31 days, ensuring the function handles standard Gregorian calendar rules.

#### Scenario 2: Test month with 30 days
Details:
  TestName: test_month_with_30_days
  Description: Ensure that the function returns 30 days for months that usually have 30 days.
Execution:
  Arrange: No special setup required.
  Act: Call `month_days` with the month parameter set to one of the months with 30 days (e.g., April which is month 4).
  Assert: Check that the return value is 30.
Validation:
  This scenario confirms the function's capability to accurately return the number of days for months containing 30 days, adhering to the typical calendar structure.

#### Scenario 3: Test February in a leap year
Details:
  TestName: test_february_in_leap_year
  Description: Test that February has 29 days when the year is a leap year.
Execution:
  Arrange: No special setup required.
  Act: Call `month_days` with the month parameter set to 2 and the leap_year parameter set to True.
  Assert: Verify that the return value is 29.
Validation:
  This test ensures that the function correctly identifies leap years and assigns February 29 days, which is crucial for applications that rely on accurate date calculations.

#### Scenario 4: Test February in a non-leap year
Details:
  TestName: test_february_in_non_leap_year
  Description: Ensure that February has 28 days when the year is not a leap year.
Execution:
  Arrange: No special setup required.
  Act: Call `month_days` with the month parameter set to 2 and the leap_year parameter set to False.
  Assert: Confirm that the return value is 28.
Validation:
  This scenario checks the function's accuracy in handling non-leap years by providing February with the correct number of days, which is essential for correct date management in various applications.

#### Scenario 5: Test with an invalid month number
Details:
  TestName: test_invalid_month_number
  Description: Verify that the function handles invalid month inputs gracefully.
Execution:
  Arrange: No special setup required.
  Act: Call `month_days` with an invalid month number (e.g., 13).
  Assert: Expect the function to handle the situation, potentially by returning None or raising an error.
Validation:
  This test checks the robustness of the function in dealing with erroneous input data, ensuring the function's reliability and stability in real-world usage.

These scenarios collectively ensure comprehensive testing of the `month_days` function, affirming its correctness and reliability across typical use cases and edge cases.
"""

# ********RoostGPT********
import pytest
import time
from calendar import isleap
from Calculate_Age.calculate import month_days

class Test_CalculateMonthDays:
    @pytest.mark.positive
    def test_month_with_31_days(self):
        # Arrange
        months_with_31_days = [1, 3, 5, 7, 8, 10, 12]

        # Act & Assert
        for month in months_with_31_days:
            assert month_days(month, isleap(2021)) == 31, f"Failed for month {month}"

    @pytest.mark.positive
    def test_month_with_30_days(self):
        # Arrange
        months_with_30_days = [4, 6, 9, 11]

        # Act & Assert
        for month in months_with_30_days:
            assert month_days(month, isleap(2021)) == 30, f"Failed for month {month}"

    @pytest.mark.leap_year
    def test_february_in_leap_year(self):
        # Arrange
        month = 2
        leap_year = True  # 2020 is a leap year

        # Act
        days = month_days(month, leap_year)

        # Assert
        assert days == 29, "February in a leap year should have 29 days"

    @pytest.mark.non_leap_year
    def test_february_in_non_leap_year(self):
        # Arrange
        month = 2
        non_leap_year = False  # 2021 is not a leap year

        # Act
        days = month_days(month, non_leap_year)

        # Assert
        assert days == 28, "February in a non-leap year should have 28 days"

    @pytest.mark.negative
    def test_invalid_month_number(self):
        # Arrange
        invalid_month = 13

        # Act & Assert
        with pytest.raises(ValueError):
            month_days(invalid_month, isleap(2021))
