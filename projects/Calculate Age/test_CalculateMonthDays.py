# ********RoostGPT********
"""
Test generated by RoostGPT for test Python-5768-test3 using AI Type  and AI Model 

ROOST_METHOD_HASH=month_days_1396fdc0ba
ROOST_METHOD_SIG_HASH=month_days_5dd3c5e333


### Scenario 1: Correct days count for January
Details:
  TestName: test_days_in_january
  Description: Verify that the function returns 31 days for January, independent of leap year status.
Execution:
  Arrange: None required.
  Act: Call month_days(1, False) and month_days(1, True).
  Assert: Both calls should return 31.
Validation:
  Rationalize the importance of the test as January always has 31 days regardless of whether it's a leap year or not. Ensures that the function correctly handles months with a fixed number of days.

### Scenario 2: Correct days count for April
Details:
  TestName: test_days_in_april
  Description: Verify that the function returns 30 days for April, independent of leap year status.
Execution:
  Arrange: None required.
  Act: Call month_days(4, False) and month_days(4, True).
  Assert: Both calls should return 30.
Validation:
  Rationalize the importance of the test since April always has 30 days regardless of leap year status. This test confirms the function's accuracy for months with a consistent day count.

### Scenario 3: Correct days count for February in a leap year
Details:
  TestName: test_february_days_leap_year
  Description: Verify that the function returns 29 days for February when it is a leap year.
Execution:
  Arrange: None required.
  Act: Call month_days(2, True).
  Assert: The call should return 29.
Validation:
  Rationalize the importance of the test as February has 29 days only in leap years. This test ensures that the function correctly identifies leap years and assigns the appropriate number of days.

### Scenario 4: Correct days count for February in a non-leap year
Details:
  TestName: test_february_days_non_leap_year
  Description: Verify that the function returns 28 days for February when it is not a leap year.
Execution:
  Arrange: None required.
  Act: Call month_days(2, False).
  Assert: The call should return 28.
Validation:
  Rationalize the importance of the test because February has 28 days in non-leap years. This test verifies that the function accurately handles non-leap years.

### Scenario 5: Correct days count for December
Details:
  TestName: test_days_in_december
  Description: Verify that the function returns 31 days for December, independent of leap year status.
Execution:
  Arrange: None required.
  Act: Call month_days(12, False) and month_days(12, True).
  Assert: Both calls should return 31.
Validation:
  Rationalize the importance of the test since December always has 31 days regardless of leap year status. This test ensures the function correctly handles months with a fixed number of days.

### Scenario 6: Handling of invalid month input
Details:
  TestName: test_invalid_month_input
  Description: Verify that the function handles an invalid month input gracefully.
Execution:
  Arrange: None required.
  Act: Attempt to call month_days(13, True) and month_days(0, False), expecting some form of error handling or indication of invalid input.
  Assert: Check that the function raises an appropriate exception or returns a specific error value.
Validation:
  Rationalize the importance of the test to ensure the function's robustness in handling erroneous inputs that do not correspond to valid months. This confirms that the function can deal with edge cases effectively.
"""

# ********RoostGPT********
import pytest
import time
from calendar import isleap
from CalculateAge.calculate import month_days

class Test_CalculateMonthDays:
    
    @pytest.mark.valid
    @pytest.mark.smoke
    def test_days_in_january(self):
        # Act
        days_non_leap = month_days(1, False)
        days_leap = month_days(1, True)
        
        # Assert
        assert days_non_leap == 31, "January should have 31 days irrespective of leap year"
        assert days_leap == 31, "January should have 31 days irrespective of leap year"

    @pytest.mark.valid
    @pytest.mark.smoke
    def test_days_in_april(self):
        # Act
        days_non_leap = month_days(4, False)
        days_leap = month_days(4, True)
        
        # Assert
        assert days_non_leap == 30, "April should have 30 days irrespective of leap year"
        assert days_leap == 30, "April should have 30 days irrespective of leap year"

    @pytest.mark.valid
    @pytest.mark.regression
    def test_february_days_leap_year(self):
        # Act
        days_leap = month_days(2, True)
        
        # Assert
        assert days_leap == 29, "February should have 29 days in a leap year"

    @pytest.mark.valid
    @pytest.mark.regression
    def test_february_days_non_leap_year(self):
        # Act
        days_non_leap = month_days(2, False)
        
        # Assert
        assert days_non_leap == 28, "February should have 28 days in a non-leap year"

    @pytest.mark.valid
    @pytest.mark.smoke
    def test_days_in_december(self):
        # Act
        days_non_leap = month_days(12, False)
        days_leap = month_days(12, True)
        
        # Assert
        assert days_non_leap == 31, "December should have 31 days irrespective of leap year"
        assert days_leap == 31, "December should have 31 days irrespective of leap year"

    @pytest.mark.invalid
    @pytest.mark.negative
    def test_invalid_month_input(self):
        # Act and Assert
        with pytest.raises(ValueError):
            month_days(13, True)
        with pytest.raises(ValueError):
            month_days(0, False)
