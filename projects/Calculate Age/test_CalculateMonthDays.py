# ********RoostGPT********
"""
Test generated by RoostGPT for test Python-5768-test3 using AI Type  and AI Model 

ROOST_METHOD_HASH=month_days_1396fdc0ba
ROOST_METHOD_SIG_HASH=month_days_5dd3c5e333


### Scenario 1: Testing January in a non-leap year
Details:
  TestName: test_january_non_leap_year
  Description: Verify that the function returns 31 days for January when it is not a leap year.
Execution:
  Arrange: None required.
  Act: Call month_days(1, False).
  Assert: Check that the result is 31.
Validation:
  January always has 31 days regardless of whether the year is a leap year or not. This test ensures the function correctly handles standard calendar rules.

### Scenario 2: Testing February in a leap year
Details:
  TestName: test_february_leap_year
  Description: Verify that the function returns 29 days for February during a leap year.
Execution:
  Arrange: None required.
  Act: Call month_days(2, True).
  Assert: Check that the result is 29.
Validation:
  February has 29 days in a leap year, and this test confirms that the function adheres to this rule, reflecting correct leap year behavior.

### Scenario 3: Testing February in a non-leap year
Details:
  TestName: test_february_non_leap_year
  Description: Verify that the function returns 28 days for February in a non-leap year.
Execution:
  Arrange: None required.
  Act: Call month_days(2, False).
  Assert: Check that the result is 28.
Validation:
  This test verifies that the function correctly identifies February as having 28 days in a standard (non-leap) year, which is crucial for accurate date handling.

### Scenario 4: Testing April in any year
Details:
  TestName: test_april_any_year
  Description: Verify that the function always returns 30 days for April, regardless of the year type.
Execution:
  Arrange: None required.
  Act: Call month_days(4, True) and month_days(4, False).
  Assert: Check that both results are 30.
Validation:
  April always has 30 days, and this test ensures that leap year status does not affect this outcome, confirming consistency across different years.

### Scenario 5: Testing December in any year
Details:
  TestName: test_december_any_year
  Description: Verify that the function always returns 31 days for December, regardless of the year type.
Execution:
  Arrange: None required.
  Act: Call month_days(12, True) and month_days(12, False).
  Assert: Check that both results are 31.
Validation:
  December always has 31 days, and this test checks that the function consistently returns the correct number of days irrespective of leap year status.

### Scenario 6: Testing a month number that is out of the normal range
Details:
  TestName: test_invalid_month_number
  Description: Verify that the function handles an invalid month number gracefully.
Execution:
  Arrange: None required.
  Act: Call month_days(13, True) or month_days(0, True).
  Assert: Expect an error handling or a specific return value indicating invalid input.
Validation:
  This scenario is important for ensuring robustness in the function, as it must handle or report invalid inputs effectively, preventing undefined behavior or errors in the system.
"""

# ********RoostGPT********
import pytest
import time
from calendar import isleap
from Calculate_Age.calculate import month_days

class Test_CalculateMonthDays:

    @pytest.mark.positive
    def test_january_non_leap_year(self):
        # Act
        result = month_days(1, False)
        # Assert
        assert result == 31, "January should have 31 days in a non-leap year"

    @pytest.mark.leap_year
    def test_february_leap_year(self):
        # Act
        result = month_days(2, True)
        # Assert
        assert result == 29, "February should have 29 days in a leap year"

    @pytest.mark.non_leap_year
    def test_february_non_leap_year(self):
        # Act
        result = month_days(2, False)
        # Assert
        assert result == 28, "February should have 28 days in a non-leap year"

    @pytest.mark.positive
    def test_april_any_year(self):
        # Act
        result_leap = month_days(4, True)
        result_non_leap = month_days(4, False)
        # Assert
        assert result_leap == 30 and result_non_leap == 30, "April should always have 30 days"

    @pytest.mark.positive
    def test_december_any_year(self):
        # Act
        result_leap = month_days(12, True)
        result_non_leap = month_days(12, False)
        # Assert
        assert result_leap == 31 and result_non_leap == 31, "December should always have 31 days"

    @pytest.mark.negative
    def test_invalid_month_number(self):
        # Act & Assert
        with pytest.raises(ValueError):
            month_days(13, True)
        with pytest.raises(ValueError):
            month_days(0, True)
