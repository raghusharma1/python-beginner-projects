# ********RoostGPT********
"""
Test generated by RoostGPT for test Python-5768-test3 using AI Type  and AI Model 

ROOST_METHOD_HASH=month_days_1396fdc0ba
ROOST_METHOD_SIG_HASH=month_days_5dd3c5e333


### Scenario 1: Testing January in a non-leap year
Details:
  TestName: test_january_non_leap_year
  Description: Verify that the function returns 31 days for January when it is not a leap year.
Execution:
  Arrange: None required.
  Act: Call month_days(1, False).
  Assert: Check that the result is 31.
Validation:
  January always has 31 days regardless of whether it is a leap year or not. This test validates that the function adheres to this rule.

### Scenario 2: Testing February in a leap year
Details:
  TestName: test_february_leap_year
  Description: Verify that the function returns 29 days for February when it is a leap year.
Execution:
  Arrange: None required.
  Act: Call month_days(2, True).
  Assert: Check that the result is 29.
Validation:
  February has 29 days in a leap year. This test ensures that the function correctly identifies a leap year and assigns the appropriate number of days to February.

### Scenario 3: Testing February in a non-leap year
Details:
  TestName: test_february_non_leap_year
  Description: Verify that the function returns 28 days for February when it is not a leap year.
Execution:
  Arrange: None required.
  Act: Call month_days(2, False).
  Assert: Check that the result is 28.
Validation:
  February has 28 days in a non-leap year. This test checks the function's ability to correctly assign the days for February in non-leap years.

### Scenario 4: Testing April in a leap year
Details:
  TestName: test_april_leap_year
  Description: Verify that the function returns 30 days for April, regardless of whether it is a leap year.
Execution:
  Arrange: None required.
  Act: Call month_days(4, True).
  Assert: Check that the result is 30.
Validation:
  April always has 30 days, irrespective of leap years. This scenario confirms that leap year status does not affect months with a fixed number of days.

### Scenario 5: Testing December in a non-leap year
Details:
  TestName: test_december_non_leap_year
  Description: Verify that the function returns 31 days for December in a non-leap year.
Execution:
  Arrange: None required.
  Act: Call month_days(12, False).
  Assert: Check that the result is 31.
Validation:
  December always has 31 days, and this test case ensures that the function consistently applies this rule.

### Scenario 6: Testing invalid month lower boundary
Details:
  TestName: test_invalid_month_zero
  Description: Verify that the function handles an invalid month input (e.g., 0) gracefully.
Execution:
  Arrange: None required.
  Act: Call month_days(0, True).
  Assert: Check for proper error handling or default behavior.
Validation:
  Since 0 is not a valid month, this test will ensure that the function has proper error handling for invalid month inputs.

### Scenario 7: Testing invalid month upper boundary
Details:
  TestName: test_invalid_month_thirteen
  Description: Verify that the function handles an invalid month input (e.g., 13) gracefully.
Execution:
  Arrange: None required.
  Act: Call month_days(13, False).
  Assert: Check for proper error handling or default behavior.
Validation:
  Since 13 is not a valid month, this test will ensure that the function has proper error handling for invalid month inputs.
"""

# ********RoostGPT********
import pytest
import time
from calendar import isleap
from Calculate_Age.calculate import month_days

class Test_CalculateMonthDays:
    
    @pytest.mark.valid
    @pytest.mark.positive
    def test_january_non_leap_year(self):
        # Act
        result = month_days(1, False)
        # Assert
        assert result == 31, "January should have 31 days in a non-leap year."

    @pytest.mark.valid
    @pytest.mark.leap_year
    def test_february_leap_year(self):
        # Act
        result = month_days(2, True)
        # Assert
        assert result == 29, "February should have 29 days in a leap year."

    @pytest.mark.valid
    @pytest.mark.negative
    def test_february_non_leap_year(self):
        # Act
        result = month_days(2, False)
        # Assert
        assert result == 28, "February should have 28 days in a non-leap year."

    @pytest.mark.valid
    @pytest.mark.positive
    def test_april_leap_year(self):
        # Act
        result = month_days(4, True)
        # Assert
        assert result == 30, "April should have 30 days regardless of leap year."

    @pytest.mark.valid
    @pytest.mark.positive
    def test_december_non_leap_year(self):
        # Act
        result = month_days(12, False)
        # Assert
        assert result == 31, "December should have 31 days in a non-leap year."

    @pytest.mark.invalid
    @pytest.mark.negative
    def test_invalid_month_zero(self):
        # Act & Assert
        with pytest.raises(ValueError):
            month_days(0, True)

    @pytest.mark.invalid
    @pytest.mark.negative
    def test_invalid_month_thirteen(self):
        # Act & Assert
        with pytest.raises(ValueError):
            month_days(13, False)
