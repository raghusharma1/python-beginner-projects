# ********RoostGPT********
"""
Test generated by RoostGPT for test Python-5768-test3 using AI Type  and AI Model 

ROOST_METHOD_HASH=month_days_1396fdc0ba
ROOST_METHOD_SIG_HASH=month_days_5dd3c5e333


### Test Scenarios for the `month_days` Function

#### Scenario 1: Test month with 31 days
Details:
  TestName: test_month_with_31_days
  Description: Verify that the function correctly returns 31 days for months that traditionally have 31 days.
Execution:
  Arrange: None required.
  Act: Call `month_days` with the month parameter set to one of [1, 3, 5, 7, 8, 10, 12].
  Assert: Check if the return value is 31.
Validation:
  Rationalize the importance of the test by ensuring that the function handles months with 31 days correctly, which is a standard calendar rule.

#### Scenario 2: Test month with 30 days
Details:
  TestName: test_month_with_30_days
  Description: Verify that the function returns 30 days for months that traditionally have 30 days.
Execution:
  Arrange: None required.
  Act: Call `month_days` with the month parameter set to one of [4, 6, 9, 11].
  Assert: Check if the return value is 30.
Validation:
  This test confirms that the function adheres to the Gregorian calendar's distribution of days in months.

#### Scenario 3: Test February in a leap year
Details:
  TestName: test_february_in_leap_year
  Description: Verify that the function returns 29 days for February when the year is a leap year.
Execution:
  Arrange: None required.
  Act: Call `month_days` with the month parameter set to 2 and leap_year set to True.
  Assert: Check if the return value is 29.
Validation:
  Ensures the function correctly handles the special case of February in a leap year, which is crucial for any date-related calculations in leap years.

#### Scenario 4: Test February in a non-leap year
Details:
  TestName: test_february_in_non_leap_year
  Description: Verify that the function returns 28 days for February when the year is not a leap year.
Execution:
  Arrange: None required.
  Act: Call `month_days` with the month parameter set to 2 and leap_year set to False.
  Assert: Check if the return value is 28.
Validation:
  Validates that the function accurately computes the days in February for non-leap years, maintaining calendar accuracy.

#### Scenario 5: Test month outside typical range
Details:
  TestName: test_invalid_month
  Description: Verify the function's behavior when an invalid month (e.g., 0 or 13) is provided.
Execution:
  Arrange: None required.
  Act: Call `month_days` with the month parameter set to 0 or 13.
  Assert: Check if the function returns `None` or raises an appropriate error.
Validation:
  Ensures robustness by checking the function's response to erroneous inputs, which helps prevent potential bugs in higher-level systems that utilize this function.

#### Scenario 6: Test extreme leap year values
Details:
  TestName: test_extreme_leap_year_values
  Description: Verify that the function handles extreme leap year values correctly, such as very distant past or future years.
Execution:
  Arrange: None required.
  Act: Call `month_days` with the month parameter set to 2 and leap_year set to the leap year status of years like 2000, 2400, 1800.
  Assert: Check if the return is correct based on the leap year status of the provided years.
Validation:
  Tests the function's accuracy with real-world and edge-case data, ensuring the function's utility remains consistent across a wide range of dates.
"""

# ********RoostGPT********
import pytest
import time
from calendar import isleap
from CalculateAge.calculate import month_days

class Test_CalculateMonthDays:
    
    @pytest.mark.valid
    @pytest.mark.positive
    def test_month_with_31_days(self):
        # Test months with 31 days
        months_with_31_days = [1, 3, 5, 7, 8, 10, 12]
        for month in months_with_31_days:
            assert month_days(month, False) == 31
    
    @pytest.mark.valid
    @pytest.mark.positive
    def test_month_with_30_days(self):
        # Test months with 30 days
        months_with_30_days = [4, 6, 9, 11]
        for month in months_with_30_days:
            assert month_days(month, False) == 30
    
    @pytest.mark.valid
    @pytest.mark.positive
    def test_february_in_leap_year(self):
        # Test February in a leap year
        assert month_days(2, True) == 29
    
    @pytest.mark.valid
    @pytest.mark.negative
    def test_february_in_non_leap_year(self):
        # Test February in a non-leap year
        assert month_days(2, False) == 28
    
    @pytest.mark.invalid
    @pytest.mark.negative
    def test_invalid_month(self):
        # Test invalid month values
        invalid_months = [0, 13]
        for month in invalid_months:
            with pytest.raises(Exception):
                month_days(month, False)
    
    @pytest.mark.valid
    @pytest.mark.positive
    def test_extreme_leap_year_values(self):
        # Test extreme leap year values
        years = [(2000, True), (2400, True), (1800, False)]
        for year, is_leap in years:
            assert month_days(2, isleap(year)) == (29 if is_leap else 28)
