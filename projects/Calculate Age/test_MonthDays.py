# ********RoostGPT********
"""
Test generated by RoostGPT for test Python-5768-test3 using AI Type  and AI Model 

ROOST_METHOD_HASH=month_days_3a7c5604f7
ROOST_METHOD_SIG_HASH=month_days_5dd3c5e333

### Scenario 1: Verify days in January (non-leap year)
Details:
  TestName: test_days_in_january
  Description: Test to ensure that the function returns 31 days for January, regardless of whether it is a leap year or not.
Execution:
  Arrange: No specific setup required.
  Act: Call `month_days(1, False)` and `month_days(1, True)`.
  Assert: Check that the result is 31 for both calls.
Validation:
  This test verifies that the function correctly identifies January as a 31-day month, aligning with standard calendar rules. This ensures that the function handles months with fixed day counts accurately.

### Scenario 2: Verify days in April (non-leap year)
Details:
  TestName: test_days_in_april
  Description: Test to confirm that April always has 30 days, independent of leap year status.
Execution:
  Arrange: No specific setup required.
  Act: Call `month_days(4, False)` and `month_days(4, True)`.
  Assert: Check that the result is 30 for both calls.
Validation:
  This scenario ensures that the function correctly returns 30 days for April, which is essential for accurate month-day mapping in non-leap years.

### Scenario 3: Verify days in February (non-leap year)
Details:
  TestName: test_days_in_february_non_leap_year
  Description: Ensure that the function returns 28 days for February in a non-leap year.
Execution:
  Arrange: No specific setup required.
  Act: Call `month_days(2, False)`.
  Assert: Verify that the result is 28.
Validation:
  This test is critical for validating the function's ability to distinguish between leap and non-leap years, specifically for February, which has variable day counts.

### Scenario 4: Verify days in February (leap year)
Details:
  TestName: test_days_in_february_leap_year
  Description: Ensure that the function returns 29 days for February in a leap year.
Execution:
  Arrange: No specific setup required.
  Act: Call `month_days(2, True)`.
  Assert: Verify that the result is 29.
Validation:
  Validates the function's accuracy in leap year calculation for February, ensuring that it complies with the leap year exception of an extra day.

### Scenario 5: Verify days in December (leap year)
Details:
  TestName: test_days_in_december
  Description: Confirm that December has 31 days, regardless of leap year status.
Execution:
  Arrange: No specific setup required.
  Act: Call `month_days(12, False)` and `month_days(12, True)`.
  Assert: Check that the result is 31 for both calls.
Validation:
  This test ensures that the function consistently recognizes December as a 31-day month, critical for year-end calculations and aligning with standard calendar rules.

### Scenario 6: Invalid month number
Details:
  TestName: test_invalid_month_number
  Description: Test the function with an invalid month number to see how it handles unexpected input.
Execution:
  Arrange: No specific setup required.
  Act: Attempt to call `month_days(13, True)` and `month_days(0, False)`.
  Assert: Expect an error or a specific return value indicating invalid input.
Validation:
  This scenario tests the function's robustness and error handling capabilities when faced with inputs that do not correspond to valid months, ensuring the function's reliability and stability.
"""

# ********RoostGPT********
import pytest
import time
from calendar import isleap
from Calculate_Age.calculate import month_days

class Test_MonthDays:
    
    @pytest.mark.valid
    @pytest.mark.smoke
    def test_days_in_january(self):
        # Arrange
        month = 1
        
        # Act
        days_non_leap = month_days(month, False)
        days_leap = month_days(month, True)
        
        # Assert
        assert days_non_leap == 31
        assert days_leap == 31
    
    @pytest.mark.valid
    @pytest.mark.smoke
    def test_days_in_april(self):
        # Arrange
        month = 4
        
        # Act
        days_non_leap = month_days(month, False)
        days_leap = month_days(month, True)
        
        # Assert
        assert days_non_leap == 30
        assert days_leap == 30
    
    @pytest.mark.valid
    @pytest.mark.negative
    def test_days_in_february_non_leap_year(self):
        # Arrange
        month = 2
        
        # Act
        days = month_days(month, False)
        
        # Assert
        assert days == 28
    
    @pytest.mark.valid
    @pytest.mark.positive
    def test_days_in_february_leap_year(self):
        # Arrange
        month = 2
        
        # Act
        days = month_days(month, True)
        
        # Assert
        assert days == 29
    
    @pytest.mark.valid
    @pytest.mark.smoke
    def test_days_in_december(self):
        # Arrange
        month = 12
        
        # Act
        days_non_leap = month_days(month, False)
        days_leap = month_days(month, True)
        
        # Assert
        assert days_non_leap == 31
        assert days_leap == 31
    
    @pytest.mark.invalid
    @pytest.mark.regression
    def test_invalid_month_number(self):
        # Arrange
        invalid_months = [0, 13]
        
        # Act & Assert
        for month in invalid_months:
            with pytest.raises(ValueError):
                month_days(month, True)
