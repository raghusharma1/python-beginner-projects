# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=hit_cells_c79c9f7889
ROOST_METHOD_SIG_HASH=hit_cells_bf68a60a92


Scenario 1: Test for No Hit Cells
Details:
  TestName: test_no_hit_cells
  Description: The test is intended to verify that the function returns an empty list when there are no hit cells on the ship.
Execution:
  Arrange: Initialize a Ship object with a list of coordinates.
  Act: Invoke the hit_cells function on the Ship object.
  Assert: Check that the returned list is empty.
Validation:
  This test is important to validate that the function correctly identifies that no cells have been hit when all cells remain unhit.

Scenario 2: Test for All Cells Hit
Details:
  TestName: test_all_cells_hit
  Description: This test is intended to verify that the function returns a list containing all the ship's coordinates when all cells have been hit.
Execution:
  Arrange: Initialize a Ship object with a list of coordinates, and simulate hits on all its cells.
  Act: Invoke the hit_cells function on the Ship object.
  Assert: Check that the returned list contains all the coordinates of the ship.
Validation:
  This test validates that the function correctly identifies all cells as hit when all cells have indeed been hit.

Scenario 3: Test for Some Cells Hit
Details:
  TestName: test_some_cells_hit
  Description: This test is intended to verify that the function returns a list containing only the coordinates of the hit cells.
Execution:
  Arrange: Initialize a Ship object with a list of coordinates, and simulate hits on some of its cells.
  Act: Invoke the hit_cells function on the Ship object.
  Assert: Check that the returned list contains only the coordinates of the cells that were hit.
Validation:
  This test validates that the function correctly identifies the hit cells when only some of the ship's cells have been hit.

Scenario 4: Test for Invalid Ship Coordinates
Details:
  TestName: test_invalid_ship_coordinates
  Description: This test is intended to verify that the function raises an InvalidShipCoordinateException when the ship's coordinates are invalid.
Execution:
  Arrange: Initialize a Ship object with invalid coordinates.
  Act: Invoke the hit_cells function on the Ship object.
  Assert: Check that an InvalidShipCoordinateException is raised.
Validation:
  This test validates that the function correctly raises an exception when the ship's coordinates are invalid, ensuring the robustness and integrity of the game's logic.

Scenario 5: Test for Invalid Hit Move
Details:
  TestName: test_invalid_hit_move
  Description: This test is intended to verify that the function raises an InvalidHitMoveException when a hit is attempted on a cell that is not part of the ship's coordinates.
Execution:
  Arrange: Initialize a Ship object with a list of coordinates, and simulate a hit on a cell that is not part of the ship's coordinates.
  Act: Invoke the hit_cells function on the Ship object.
  Assert: Check that an InvalidHitMoveException is raised.
Validation:
  This test validates that the function correctly raises an exception when a hit is attempted on a cell that is not part of the ship's coordinates, preserving the rules and fairness of the game.
"""

# ********RoostGPT********
import sys
import pytest
from typing import Set, Tuple, List

# Append the path of the module to sys.path
sys.path.append('<path to the directory containing battleship_v2>')

from battleship_v2.ship import Ship
from exceptions import InvalidHitMoveException, InvalidShipCoordinateException

class Test_ShipHitCells:
    @pytest.mark.valid
    def test_no_hit_cells(self):
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        assert ship.hit_cells() == []

    @pytest.mark.valid
    def test_all_cells_hit(self):
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        ship._un_hit_coordinates = set()
        assert ship.hit_cells() == [(1, 1), (1, 2), (1, 3)]

    @pytest.mark.valid
    def test_some_cells_hit(self):
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        ship._un_hit_coordinates = set([(1, 3)])
        assert ship.hit_cells() == [(1, 1), (1, 2)]

    @pytest.mark.negative
    def test_invalid_ship_coordinates(self):
        with pytest.raises(InvalidShipCoordinateException):
            Ship([(1, 1), (1, 2), 'invalid'])

    @pytest.mark.negative
    def test_invalid_hit_move(self):
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        ship._un_hit_coordinates = set([(2, 2)])
        with pytest.raises(InvalidHitMoveException):
            ship.hit_cells()
