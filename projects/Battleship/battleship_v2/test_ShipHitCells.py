# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=hit_cells_c79c9f7889
ROOST_METHOD_SIG_HASH=hit_cells_bf68a60a92


Scenario 1: Test for hit cells when all cells of the ship are un-hit
Details:
  TestName: test_hit_cells_all_cells_unhit
  Description: The test is intended to verify the function hit_cells when all cells of the ship are un-hit. In this case, the function should return an empty list.
Execution:
  Arrange: Initialize a ship object with certain coordinates. Make sure all coordinates are un-hit.
  Act: Invoke the hit_cells function on the ship object.
  Assert: Check if the returned list is empty.
Validation:
  This test is important to ensure that the function correctly identifies when no hits have been made on the ship. This directly relates to the game logic where a ship is considered un-hit when it is first placed on the board.

Scenario 2: Test for hit cells when some cells of the ship are hit
Details:
  TestName: test_hit_cells_some_cells_hit
  Description: The test is intended to verify the function hit_cells when some cells of the ship are hit. The function should return the list of coordinates of the hit cells.
Execution:
  Arrange: Initialize a ship object with certain coordinates. Make some of the cells as hit.
  Act: Invoke the hit_cells function on the ship object.
  Assert: Check if the returned list contains the correct coordinates of the hit cells.
Validation:
  This test is important to ensure that the function correctly identifies the hit cells of the ship. This is crucial for the game logic to track the status of the ship during the game.

Scenario 3: Test for hit cells when all cells of the ship are hit
Details:
  TestName: test_hit_cells_all_cells_hit
  Description: The test is intended to verify the function hit_cells when all cells of the ship are hit. The function should return the list of coordinates of all cells as they are all hit.
Execution:
  Arrange: Initialize a ship object with certain coordinates. Make all of the cells as hit.
  Act: Invoke the hit_cells function on the ship object.
  Assert: Check if the returned list contains the coordinates of all cells of the ship.
Validation:
  This test is important to ensure that the function correctly identifies when all cells of the ship are hit. This is critical for the game logic to determine when a ship is sunk.

Scenario 4: Test for hit cells when the ship has no cells
Details:
  TestName: test_hit_cells_no_cells
  Description: The test is intended to verify the function hit_cells when the ship has no cells. In this case, the function should return an empty list.
Execution:
  Arrange: Initialize a ship object with no coordinates. 
  Act: Invoke the hit_cells function on the ship object.
  Assert: Check if the returned list is empty.
Validation:
  This test is important to ensure that the function can handle the edge case when the ship has no cells. This can happen when a ship is just initialized but not yet placed on the board.
"""

# ********RoostGPT********
import pytest
from typing import List, Tuple
from ship import Ship
from exceptions import InvalidHitMoveException, InvalidShipCoordinateException

class Test_ShipHitCells:

    def test_hit_cells_all_cells_unhit(self):
        ship = Ship([(1,1), (1,2), (1,3)])
        hit_cells = ship.hit_cells()
        assert hit_cells == []

    def test_hit_cells_some_cells_hit(self):
        ship = Ship([(1,1), (1,2), (1,3)])
        ship._un_hit_coordinates.remove((1,2))
        hit_cells = ship.hit_cells()
        assert hit_cells == [(1,2)]

    def test_hit_cells_all_cells_hit(self):
        ship = Ship([(1,1), (1,2), (1,3)])
        ship._un_hit_coordinates.clear()
        hit_cells = ship.hit_cells()
        assert set(hit_cells) == set([(1,1), (1,2), (1,3)])

    def test_hit_cells_no_cells(self):
        ship = Ship([])
        hit_cells = ship.hit_cells()
        assert hit_cells == []
