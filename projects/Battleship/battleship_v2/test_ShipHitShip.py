# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=hit_ship_3bdac7fefd
ROOST_METHOD_SIG_HASH=hit_ship_6f0656d6db


Scenario 1: Test that the function correctly marks a ship cell as hit.
Details:
  TestName: test_hit_ship_marks_cell_as_hit
  Description: This test is intended to verify that the function correctly marks a cell as hit when provided with a valid row and column.
Execution:
  Arrange: Initialize a ship object with a set of coordinates. Select a coordinate that is part of the ship.
  Act: Call the hit_ship function with the selected coordinate.
  Assert: Check that the selected coordinate is no longer in the _un_hit_coordinates attribute of the ship.
Validation:
  This test is important to ensure that the function is correctly marking cells as hit. This is a core part of the game's mechanics, and it needs to function correctly for the game to be playable.

Scenario 2: Test that the function raises an exception when attempting to hit an already hit cell.
Details:
  TestName: test_hit_ship_raises_exception_for_already_hit_cell
  Description: This test is intended to verify that the function raises an InvalidHitMoveException when the cell specified by the row and column has already been hit.
Execution:
  Arrange: Initialize a ship object with a set of coordinates. Select a coordinate that is part of the ship and hit it.
  Act: Call the hit_ship function again with the same coordinate.
  Assert: Check that an InvalidHitMoveException is raised.
Validation:
  This test ensures that the function correctly prevents players from hitting the same cell multiple times, which is a requirement of the game rules.

Scenario 3: Test that the function raises an exception when attempting to hit a ship that is already destroyed.
Details:
  TestName: test_hit_ship_raises_exception_for_destroyed_ship
  Description: This test is intended to verify that the function raises an InvalidHitMoveException when the ship is already destroyed.
Execution:
  Arrange: Initialize a ship object with a single coordinate and hit it, effectively destroying the ship.
  Act: Call the hit_ship function again with any coordinate.
  Assert: Check that an InvalidHitMoveException is raised.
Validation:
  This test is important to ensure that the function correctly prevents players from hitting a destroyed ship, which is a requirement of the game rules.

Scenario 4: Test that the function raises an exception when attempting to hit a cell not part of the ship.
Details:
  TestName: test_hit_ship_raises_exception_for_invalid_coordinate
  Description: This test is intended to verify that the function raises an InvalidHitMoveException when the cell specified by the row and column is not part of the ship.
Execution:
  Arrange: Initialize a ship object with a set of coordinates. Select a coordinate that is not part of the ship.
  Act: Call the hit_ship function with the selected coordinate.
  Assert: Check that an InvalidHitMoveException is raised.
Validation:
  This test ensures that the function correctly prevents players from hitting cells that are not part of the ship, which is a requirement of the game rules.
"""

# ********RoostGPT********
import pytest
from typing import Set, Tuple, List
from exceptions import InvalidHitMoveException, InvalidShipCoordinateException
from ship import Ship  # Corrected the import statement 

class Test_ShipHitShip:

    @pytest.mark.regression
    def test_hit_ship_marks_cell_as_hit(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        hit_coordinate = (1, 2)

        # Act
        ship.hit_ship(*hit_coordinate)

        # Assert
        assert hit_coordinate not in ship._un_hit_coordinates

    @pytest.mark.regression
    def test_hit_ship_raises_exception_for_already_hit_cell(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        hit_coordinate = (1, 2)
        ship.hit_ship(*hit_coordinate)

        # Act & Assert
        with pytest.raises(InvalidHitMoveException):
            ship.hit_ship(*hit_coordinate)

    @pytest.mark.regression
    def test_hit_ship_raises_exception_for_destroyed_ship(self):
        # Arrange
        ship = Ship([(1, 1)])
        hit_coordinate = (1, 1)
        ship.hit_ship(*hit_coordinate)

        # Act & Assert
        with pytest.raises(InvalidHitMoveException):
            ship.hit_ship(*hit_coordinate)

    @pytest.mark.regression
    def test_hit_ship_raises_exception_for_invalid_coordinate(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        invalid_coordinate = (2, 2)

        # Act & Assert
        with pytest.raises(InvalidHitMoveException):
            ship.hit_ship(*invalid_coordinate)
