# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=boolean_prompt_f604da2749
ROOST_METHOD_SIG_HASH=boolean_prompt_3fbd5f589a


```
Scenario 1: Validate correct boolean interpretation
Details:
  TestName: test_boolean_prompt_correct_boolean_interpretation
  Description: This test verifies that the function correctly interprets the user's input as either true or false based on the provided true_str and false_str.
Execution:
  Arrange: Mock the input function to return a string that matches the true_str.
  Act: Call the boolean_prompt function with the prompt_message and the mock input.
  Assert: Check that the returned value is True.
Validation:
  This test is important to ensure that the function correctly interprets the user's input as a boolean value based on the true_str and false_str parameters. This is a basic functionality of the function and is crucial for its correct operation.

Scenario 2: Validate error message display for invalid input
Details:
  TestName: test_boolean_prompt_error_message_display
  Description: This test verifies that the function correctly displays an error message when the user's input is not recognized as either true or false.
Execution:
  Arrange: Mock the input function to return a string that does not match either the true_str or the false_str, and mock the print function to capture its output.
  Act: Call the boolean_prompt function with the prompt_message and the mock input.
  Assert: Check that the print function was called with the error_message.
Validation:
  This test is important to ensure that the function correctly handles invalid user input by displaying an appropriate error message. This is a key aspect of user experience and helps guide the user to provide valid input.

Scenario 3: Validate case insensitivity
Details:
  TestName: test_boolean_prompt_case_insensitivity
  Description: This test verifies that the function correctly interprets the user's input as either true or false regardless of the case of the input.
Execution:
  Arrange: Mock the input function to return a string that matches the true_str or false_str but in a different case.
  Act: Call the boolean_prompt function with the prompt_message and the mock input.
  Assert: Check that the returned value is True or False as appropriate.
Validation:
  This test is important to ensure that the function is not case-sensitive and can correctly interpret the user's input regardless of its case. This is an important aspect of usability and ensures that the function is not overly strict in its input requirements.
```
"""

# ********RoostGPT********
import pytest
from unittest.mock import patch

# Corrected the import statement according to the directory structure
from projects.Battleship.battleship_v2.utils import PromptMixin

class Test_PromptMixinBooleanPrompt:

    @pytest.mark.parametrize("user_input,expected_result", [("yes", True), ("no", False)])
    @patch("builtins.input", side_effect=["yes", "no"])
    def test_boolean_prompt_correct_boolean_interpretation(self, mock_input, user_input, expected_result):
        assert PromptMixin.boolean_prompt("Enter yes or no: ") == expected_result

    @patch("builtins.input", side_effect=["maybe"])
    @patch("builtins.print")
    def test_boolean_prompt_error_message_display(self, mock_print, mock_input):
        PromptMixin.boolean_prompt("Enter yes or no: ")
        mock_print.assert_called_once_with("Invalid Input! Please try again.\n")

    @pytest.mark.parametrize("user_input,expected_result", [("YES", True), ("NO", False)])
    @patch("builtins.input", side_effect=["YES", "NO"])
    def test_boolean_prompt_case_insensitivity(self, mock_input, user_input, expected_result):
        assert PromptMixin.boolean_prompt("Enter yes or no: ") == expected_result
