# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=boolean_prompt_f604da2749
ROOST_METHOD_SIG_HASH=boolean_prompt_3fbd5f589a


Scenario 1: Test valid boolean input
Details:
  TestName: test_valid_boolean_input
  Description: This test is intended to verify that the function correctly identifies valid boolean inputs, which are represented by the strings defined by the parameters true_str and false_str.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the boolean_prompt function with a prompt_message parameter that will result in a valid boolean input.
  Assert: Check that the function returns the correct boolean value corresponding to the input string.
Validation:
  This test is important to ensure that the function can correctly interpret valid boolean inputs. The expected result is that the function will return a boolean value that corresponds to the input string, as per the function's specifications.

Scenario 2: Test invalid boolean input
Details:
  TestName: test_invalid_boolean_input
  Description: This test is intended to verify that the function correctly identifies invalid boolean inputs and prompts the user again for input.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the boolean_prompt function with a prompt_message parameter that will result in an invalid boolean input.
  Assert: Check that the function prints the error_message and prompts the user again for input.
Validation:
  This test is important to ensure that the function can correctly handle invalid boolean inputs. The expected result is that the function will print the error message and prompt the user again for input, as per the function's specifications.

Scenario 3: Test case sensitivity
Details:
  TestName: test_case_sensitivity
  Description: This test is intended to verify that the function correctly handles boolean inputs of varying case.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the boolean_prompt function with a prompt_message parameter that will result in a valid boolean input of varying case.
  Assert: Check that the function returns the correct boolean value corresponding to the input string, regardless of its case.
Validation:
  This test is important to ensure that the function can correctly interpret boolean inputs of varying case. The expected result is that the function will return a boolean value that corresponds to the input string, regardless of its case, as per the function's specifications.

Scenario 4: Test custom true and false strings
Details:
  TestName: test_custom_true_false_strings
  Description: This test is intended to verify that the function correctly identifies boolean inputs when the true_str and false_str parameters are customized.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the boolean_prompt function with a prompt_message parameter that will result in a valid boolean input, and customize the true_str and false_str parameters.
  Assert: Check that the function returns the correct boolean value corresponding to the input string.
Validation:
  This test is important to ensure that the function can correctly interpret boolean inputs when the true_str and false_str parameters are customized. The expected result is that the function will return a boolean value that corresponds to the input string, as per the function's specifications.
"""

# ********RoostGPT********
from unittest.mock import patch
import pytest
from battleship_v2.utils import PromptMixin

class Test_PromptMixinBooleanPrompt:
    @patch('builtins.input', return_value='yes')
    def test_valid_boolean_input(self, mock_input):
        assert PromptMixin().boolean_prompt('Please enter a boolean value: ') == True

    @patch('builtins.input', side_effect=['maybe', 'no'])
    def test_invalid_boolean_input(self, mock_input, capsys):
        assert PromptMixin().boolean_prompt('Please enter a boolean value: ') == False
        captured = capsys.readouterr()
        assert "Invalid Input! Please try again.\n" in captured.out

    @patch('builtins.input', return_value='YES')
    def test_case_sensitivity(self, mock_input):
        assert PromptMixin().boolean_prompt('Please enter a boolean value: ') == True

    @patch('builtins.input', return_value='oui')
    def test_custom_true_false_strings(self, mock_input):
        assert PromptMixin().boolean_prompt('Please enter a boolean value: ', true_str='oui', false_str='non') == True
