# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=un_hit_cells_34c276112d
ROOST_METHOD_SIG_HASH=un_hit_cells_6874bfea3f


Scenario 1: Validate un-hit cells when all cells are un-hit.
Details:
  TestName: test_un_hit_cells_all_unhit
  Description: This test verifies that the function returns all cell coordinates when no cell has been hit.
Execution:
  Arrange: Initialize a ship with certain coordinates.
  Act: Call the un_hit_cells function without hitting any cell.
  Assert: Check if the returned list of coordinates is equal to the initial coordinates of the ship.
Validation:
  This test ensures that the function correctly identifies all cells as un-hit when no cell has been hit. This is crucial for the game's mechanics as it helps in determining the status of a ship.

Scenario 2: Validate un-hit cells when some cells are hit.
Details:
  TestName: test_un_hit_cells_some_hit
  Description: This test verifies that the function returns only un-hit cell coordinates when some cells have been hit.
Execution:
  Arrange: Initialize a ship with certain coordinates and hit some of its cells.
  Act: Call the un_hit_cells function.
  Assert: Check if the returned list of coordinates only includes the coordinates of un-hit cells.
Validation:
  This test ensures that the function correctly identifies and returns only un-hit cells. This is important for the game's mechanics to correctly track the status of a ship.

Scenario 3: Validate un-hit cells when all cells are hit.
Details:
  TestName: test_un_hit_cells_all_hit
  Description: This test verifies that the function returns an empty list when all cells have been hit.
Execution:
  Arrange: Initialize a ship with certain coordinates and hit all of its cells.
  Act: Call the un_hit_cells function.
  Assert: Check if the returned list of coordinates is empty.
Validation:
  This test ensures that the function correctly identifies when all cells have been hit. This is crucial for the game's mechanics as it helps in determining when a ship has been sunk.

Scenario 4: Validate un-hit cells with no cells.
Details:
  TestName: test_un_hit_cells_no_cells
  Description: This test verifies that the function returns an empty list when the ship has no cells.
Execution:
  Arrange: Initialize a ship with no coordinates.
  Act: Call the un_hit_cells function.
  Assert: Check if the returned list of coordinates is empty.
Validation:
  This test ensures that the function correctly handles the edge case when the ship has no cells. This is important for the game's robustness, ensuring it can handle unusual or unexpected scenarios without crashing or behaving unexpectedly.
"""

# ********RoostGPT********
import pytest
from typing import Set, Tuple, List

# Assuming that the ship.py file is in the same directory as the test file
# If not, adjust the import accordingly
from ship import Ship

# Assuming that the exceptions are defined in a file named exceptions.py in the same directory
# If not, adjust the import accordingly
from exceptions import InvalidHitMoveException, InvalidShipCoordinateException

class Test_ShipUnHitCells:

    @pytest.mark.regression
    def test_un_hit_cells_all_unhit(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])

        # Act
        un_hit_cells = ship.un_hit_cells()

        # Assert
        assert un_hit_cells == [(1, 1), (1, 2), (1, 3)]

    @pytest.mark.regression
    def test_un_hit_cells_some_hit(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        ship.hit((1, 1))

        # Act
        un_hit_cells = ship.un_hit_cells()

        # Assert
        assert un_hit_cells == [(1, 2), (1, 3)]

    @pytest.mark.regression
    def test_un_hit_cells_all_hit(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        ship.hit((1, 1))
        ship.hit((1, 2))
        ship.hit((1, 3))

        # Act
        un_hit_cells = ship.un_hit_cells()

        # Assert
        assert un_hit_cells == []

    @pytest.mark.regression
    def test_un_hit_cells_no_cells(self):
        # Arrange
        ship = Ship([])

        # Act
        un_hit_cells = ship.un_hit_cells()

        # Assert
        assert un_hit_cells == []
