# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=un_hit_cells_34c276112d
ROOST_METHOD_SIG_HASH=un_hit_cells_6874bfea3f


Scenario 1: Validate un-hit cells for a newly created ship
Details:
  TestName: test_un_hit_cells_for_new_ship
  Description: This test is intended to verify that for a newly created ship, all cells are un-hit. This means when we call un_hit_cells, it should return all the coordinates of the ship.
Execution:
  Arrange: Create a ship object with some coordinates.
  Act: Call the un_hit_cells method on the ship object.
  Assert: Check that the returned list contains all the coordinates of the ship.
Validation:
  This test is important to ensure that the un_hit_cells method correctly identifies all cells as un-hit when the ship is first created, which meets the game's requirement that all cells are un-hit at the beginning.

Scenario 2: Validate un-hit cells after some cells have been hit
Details:
  TestName: test_un_hit_cells_after_hits
  Description: This test is intended to verify that after some cells have been hit, the un_hit_cells method correctly identifies the remaining un-hit cells.
Execution:
  Arrange: Create a ship object with some coordinates, and simulate some hits on the ship.
  Act: Call the un_hit_cells method on the ship object.
  Assert: Check that the returned list only contains the coordinates of the cells that have not been hit.
Validation:
  This test is important to ensure that the un_hit_cells method updates correctly after cells have been hit, which is crucial for the game logic to determine the remaining targets.

Scenario 3: Validate un-hit cells when all cells have been hit
Details:
  TestName: test_un_hit_cells_no_unhit_cells
  Description: This test is intended to verify that when all cells on the ship have been hit, the un_hit_cells method returns an empty list.
Execution:
  Arrange: Create a ship object with some coordinates, and simulate hits on all cells of the ship.
  Act: Call the un_hit_cells method on the ship object.
  Assert: Check that the returned list is empty.
Validation:
  This test is important to ensure that the un_hit_cells method correctly identifies when there are no more un-hit cells, which is crucial for the game to determine when a ship has been sunk.
"""

# ********RoostGPT********
import pytest
from typing import Set, Tuple, List
from exceptions import InvalidHitMoveException, InvalidShipCoordinateException
from Battleship.battleship_v2.ship import Ship

class Test_ShipUnHitCells:
    
    @pytest.mark.positive
    def test_un_hit_cells_for_new_ship(self):
        # Arrange
        ship_coordinates = [(0, 1), (0, 2), (0, 3)]
        ship = Ship(ship_coordinates)

        # Act
        un_hit_cells = ship.un_hit_cells()

        # Assert
        assert un_hit_cells == ship_coordinates, 'For a new ship all cells should be un-hit'
        
    @pytest.mark.positive
    def test_un_hit_cells_after_hits(self):
        # Arrange
        ship_coordinates = [(0, 1), (0, 2), (0, 3)]
        ship = Ship(ship_coordinates)

        # Simulate hits on the ship
        ship.hit((0, 1))
        ship.hit((0, 2))

        # Act
        un_hit_cells = ship.un_hit_cells()

        # Assert
        assert un_hit_cells == [(0, 3)], 'Only cells that have not been hit should be returned'
        
    @pytest.mark.negative
    def test_un_hit_cells_no_unhit_cells(self):
        # Arrange
        ship_coordinates = [(0, 1), (0, 2), (0, 3)]
        ship = Ship(ship_coordinates)

        # Simulate hits on all cells of the ship
        ship.hit((0, 1))
        ship.hit((0, 2))
        ship.hit((0, 3))

        # Act
        un_hit_cells = ship.un_hit_cells()

        # Assert
        assert un_hit_cells == [], 'When all cells have been hit, an empty list should be returned'
