# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=num_hits_ac98ccf58e
ROOST_METHOD_SIG_HASH=num_hits_485fe60723


Scenario 1: Test when the ship has no hits
Details:
  TestName: test_num_hits_no_hit
  Description: This test is intended to verify that the function num_hits returns 0 when there are no hits on the ship.
Execution:
  Arrange: Initialize a ship object with valid coordinates.
  Act: Call the num_hits function on the ship object.
  Assert: Check that the returned value is 0.
Validation:
  The test verifies the business logic of num_hits function when the ship has no hits. The function should return 0 in this scenario, as per the function's specifications.

Scenario 2: Test when the ship has one hit
Details:
  TestName: test_num_hits_one_hit
  Description: This test is intended to verify that the function num_hits returns 1 when there is one hit on the ship.
Execution:
  Arrange: Initialize a ship object with valid coordinates. Simulate a hit on the ship.
  Act: Call the num_hits function on the ship object.
  Assert: Check that the returned value is 1.
Validation:
  The test verifies the business logic of num_hits function when the ship has one hit. The function should return 1 in this scenario, which is in line with the function's specifications.

Scenario 3: Test when the ship has multiple hits
Details:
  TestName: test_num_hits_multiple_hits
  Description: This test is intended to verify that the function num_hits returns the correct number when the ship has multiple hits.
Execution:
  Arrange: Initialize a ship object with valid coordinates. Simulate multiple hits on the ship.
  Act: Call the num_hits function on the ship object.
  Assert: Check that the returned value matches the number of hits.
Validation:
  The test verifies the business logic of num_hits function when the ship has multiple hits. It should return the accurate number of hits, which is consistent with the function's specifications.

Scenario 4: Test when the ship is sunk
Details:
  TestName: test_num_hits_ship_sunk
  Description: This test is intended to verify that the function num_hits returns the correct number when all the ship's coordinates have been hit, indicating the ship is sunk.
Execution:
  Arrange: Initialize a ship object with valid coordinates. Simulate hits on all the ship's coordinates.
  Act: Call the num_hits function on the ship object.
  Assert: Check that the returned value matches the total number of ship's coordinates.
Validation:
  The test verifies the business logic of num_hits function when all the ship's coordinates have been hit. The function should return the total number of ship's coordinates in this case, conforming to the function's specifications.
"""

# ********RoostGPT********
import pytest
from typing import Set, Tuple, List
from .ship import Ship
from .exceptions import InvalidHitMoveException, InvalidShipCoordinateException

class Test_ShipNumHits:

    @pytest.mark.regression
    def test_num_hits_no_hit(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        
        # Act
        num_hits = ship.num_hits()

        # Assert
        assert num_hits == 0

    @pytest.mark.regression
    def test_num_hits_one_hit(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        ship.hit_cells = [(1, 1)]
        
        # Act
        num_hits = ship.num_hits()

        # Assert
        assert num_hits == 1

    @pytest.mark.regression
    def test_num_hits_multiple_hits(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        ship.hit_cells = [(1, 1), (1, 2)]
        
        # Act
        num_hits = ship.num_hits()

        # Assert
        assert num_hits == 2

    @pytest.mark.regression
    def test_num_hits_ship_sunk(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        ship.hit_cells = [(1, 1), (1, 2), (1, 3)]
        
        # Act
        num_hits = ship.num_hits()

        # Assert
        assert num_hits == 3
