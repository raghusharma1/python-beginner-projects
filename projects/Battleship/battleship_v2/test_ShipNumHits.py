# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=num_hits_ac98ccf58e
ROOST_METHOD_SIG_HASH=num_hits_485fe60723


Scenario 1: Test when the ship has no hits
Details:
  TestName: test_num_hits_no_hit
  Description: This test is intended to verify that the function num_hits returns 0 when there are no hits on the ship.
Execution:
  Arrange: Initialize a ship object with valid coordinates.
  Act: Call the num_hits function on the ship object.
  Assert: Check that the returned value is 0.
Validation:
  The test verifies the correctness of the num_hits function when the ship has no hits. The function should return 0 in this scenario, as per the business requirements.

Scenario 2: Test when the ship has one hit
Details:
  TestName: test_num_hits_one_hit
  Description: This test is intended to verify that the function num_hits correctly returns 1 when there is one hit on the ship.
Execution:
  Arrange: Initialize a ship object with valid coordinates. Simulate a hit on the ship.
  Act: Call the num_hits function on the ship object.
  Assert: Check that the returned value is 1.
Validation:
  The test verifies that the num_hits function accurately reflects the number of hits on the ship. The function should return 1 in this scenario, as per the business requirements.

Scenario 3: Test when the ship has multiple hits
Details:
  TestName: test_num_hits_multiple_hits
  Description: This test is intended to verify that the function num_hits correctly returns the number of hits when the ship has been hit multiple times.
Execution:
  Arrange: Initialize a ship object with valid coordinates. Simulate multiple hits on the ship.
  Act: Call the num_hits function on the ship object.
  Assert: Check that the returned value matches the number of hits.
Validation:
  This test ensures that the num_hits function can accurately count multiple hits on the ship. The function should return the correct number of hits in this scenario, fulfilling the business requirements.

Scenario 4: Test when the ship has been sunk
Details:
  TestName: test_num_hits_ship_sunk
  Description: This test is intended to verify that the function num_hits correctly returns the total number of cells of the ship when the ship has been sunk.
Execution:
  Arrange: Initialize a ship object with valid coordinates. Simulate hits on all coordinates of the ship.
  Act: Call the num_hits function on the ship object.
  Assert: Check that the returned value matches the total number of cells of the ship.
Validation:
  This test ensures that the num_hits function can accurately count the number of hits when the ship has been sunk. The function should return the total number of cells of the ship in this scenario, fulfilling the business requirements.
"""

# ********RoostGPT********
import pytest
import sys
import os
from typing import Set, Tuple, List

# Add the battleship_v2 module path to sys.path
sys.path.append(os.path.abspath('/path/to/directory/containing/battleship_v2/module'))

from battleship_v2.ship import Ship
from exceptions import InvalidHitMoveException, InvalidShipCoordinateException

class Test_ShipNumHits:

    @pytest.mark.regression
    def test_num_hits_no_hit(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        
        # Act
        num_hits = ship.num_hits()

        # Assert
        assert num_hits == 0

    @pytest.mark.regression
    def test_num_hits_one_hit(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        ship.hit_cells = [(1, 1)]
        
        # Act
        num_hits = ship.num_hits()

        # Assert
        assert num_hits == 1

    @pytest.mark.regression
    def test_num_hits_multiple_hits(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        ship.hit_cells = [(1, 1), (1, 2)]
        
        # Act
        num_hits = ship.num_hits()

        # Assert
        assert num_hits == 2

    @pytest.mark.regression
    def test_num_hits_ship_sunk(self):
        # Arrange
        ship = Ship([(1, 1), (1, 2), (1, 3)])
        ship.hit_cells = [(1, 1), (1, 2), (1, 3)]
        
        # Act
        num_hits = ship.num_hits()

        # Assert
        assert num_hits == 3
