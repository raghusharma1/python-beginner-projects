# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=current_player_563a544538
ROOST_METHOD_SIG_HASH=current_player_87cbe85fd7


Scenario 1: Validate Current Player Assignment
Details:
  TestName: test_current_player_assignment
  Description: This test is intended to verify that the current_player method correctly assigns the value to the _current_player attribute.
Execution:
  Arrange: An instance of the class where the current_player method is defined needs to be initiated. Also, a mock player object (value) will be created to pass onto the current_player method.
  Act: The current_player method will be invoked with the mock player object as a parameter.
  Assert: The expected outcome is that the _current_player attribute of the class instance should now be equal to the mock player object that was passed.
Validation:
  This test ensures that the method correctly assigns the current player, which is crucial for the game's flow. The correct assignment of the current player ensures that the turns in the game are properly managed.

Scenario 2: Validate Current Player Switch
Details:
  TestName: test_current_player_switch
  Description: This test is intended to verify that the current_player method correctly switches the value of the _current_player attribute when invoked with a different player.
Execution:
  Arrange: An instance of the class where the current_player method is defined needs to be initiated, and the current_player should be set with a mock player object. A different mock player object will be created to switch the current player.
  Act: The current_player method will be invoked with the new mock player object as a parameter.
  Assert: The expected outcome is that the _current_player attribute of the class instance should now be equal to the new mock player object that was passed.
Validation:
  This test ensures that the method can correctly switch the current player, which is important for the game's progression. The ability to switch the current player ensures that the turns in the game rotate between the players as expected.

Scenario 3: Validate Current Player Retention
Details:
  TestName: test_current_player_retention
  Description: This test is intended to verify that the current_player method retains the value of the _current_player attribute when invoked with the same player.
Execution:
  Arrange: An instance of the class where the current_player method is defined needs to be initiated, and the current_player should be set with a mock player object. The same mock player object will be used to invoke the current_player method.
  Act: The current_player method will be invoked with the same mock player object as a parameter.
  Assert: The expected outcome is that the _current_player attribute of the class instance should still be equal to the original mock player object that was passed.
Validation:
  This test ensures that the method can correctly retain the current player when the same player continues, which is vital for maintaining the game's state. The ability to retain the current player ensures that the turns in the game stay with the same player when necessary.
"""

# ********RoostGPT********
import pytest
from unittest.mock import Mock
from game import Game

class Test_GameCurrentPlayer:
    @pytest.mark.regression
    @pytest.mark.positive
    def test_current_player_assignment(self):
        # Arrange
        game = Game()
        mock_player = Mock()

        # Act
        game.current_player(mock_player)

        # Assert
        assert game._current_player == mock_player

    @pytest.mark.regression
    @pytest.mark.positive
    def test_current_player_switch(self):
        # Arrange
        game = Game()
        mock_player1 = Mock()
        mock_player2 = Mock()
        game.current_player(mock_player1)

        # Act
        game.current_player(mock_player2)

        # Assert
        assert game._current_player == mock_player2

    @pytest.mark.regression
    @pytest.mark.positive
    def test_current_player_retention(self):
        # Arrange
        game = Game()
        mock_player = Mock()
        game.current_player(mock_player)

        # Act
        game.current_player(mock_player)

        # Assert
        assert game._current_player == mock_player
