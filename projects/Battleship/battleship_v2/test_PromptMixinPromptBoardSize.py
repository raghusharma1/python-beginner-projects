# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=prompt_board_size_022845cd0e
ROOST_METHOD_SIG_HASH=prompt_board_size_a691f66c9b


Scenario 1: Valid Board Size
Details:
  TestName: test_valid_board_size
  Description: This test is intended to verify that the function returns the correct board size when the user inputs a valid board size.
Execution:
  Arrange: Mock the input function to return a valid board size within the min and max boundaries.
  Act: Invoke the function with a prompt message, error message, and the default min and max board size.
  Assert: Check that the returned board size is the same as the one mocked.
Validation:
  This test is important to ensure that the function correctly handles valid inputs and returns the correct board size as per the user's input.

Scenario 2: Invalid Board Size
Details:
  TestName: test_invalid_board_size
  Description: This test is intended to verify that the function continues to prompt the user for a valid board size when an invalid size is input.
Execution:
  Arrange: Mock the input function to return an invalid board size outside the min and max boundaries first, then a valid board size.
  Act: Invoke the function with a prompt message, error message, and the default min and max board size.
  Assert: Check that the returned board size is the valid one and not the invalid one.
Validation:
  This test is crucial to ensure that the function correctly handles invalid inputs by continuing to prompt the user until a valid input is received.

Scenario 3: Non-Integer Input
Details:
  TestName: test_non_integer_input
  Description: This test is intended to verify that the function handles non-integer inputs by continuing to prompt the user until a valid integer is input.
Execution:
  Arrange: Mock the input function to return a non-integer input first, then a valid integer board size.
  Act: Invoke the function with a prompt message, error message, and the default min and max board size.
  Assert: Check that the returned board size is the valid integer and not the non-integer input.
Validation:
  This test is important to ensure that the function correctly handles non-integer inputs by continuing to prompt the user until a valid integer is input.

Scenario 4: Custom Min and Max Boundaries
Details:
  TestName: test_custom_min_max_boundaries
  Description: This test is intended to verify that the function correctly uses custom min and max boundaries for the board size.
Execution:
  Arrange: Mock the input function to return a board size within the custom boundaries.
  Act: Invoke the function with a prompt message, error message, and custom min and max board sizes.
  Assert: Check that the returned board size is within the custom boundaries.
Validation:
  This test is important to ensure that the function correctly uses custom min and max boundaries when specified.
"""

# ********RoostGPT********
import pytest
from unittest.mock import patch
import sys
import os

# Add the root directory to the PYTHONPATH
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))

from battleship_v2.utils import PromptMixin

class Test_PromptMixinPromptBoardSize:
    @pytest.mark.parametrize("input_value, expected_output", [(8, 8), (10, 10)])
    def test_valid_board_size(self, input_value, expected_output):
        with patch('builtins.input', return_value=input_value):
            result = PromptMixin.prompt_board_size("Enter board size: ", "Invalid board size.")
            assert result == expected_output

    @pytest.mark.parametrize("input_values, expected_output", [(('20', '8'), 8), (('0', '10'), 10)])
    def test_invalid_board_size(self, input_values, expected_output):
        with patch('builtins.input', side_effect=input_values):
            result = PromptMixin.prompt_board_size("Enter board size: ", "Invalid board size.")
            assert result == expected_output

    @pytest.mark.parametrize("input_values, expected_output", [(('eight', '8'), 8), (('ten', '10'), 10)])
    def test_non_integer_input(self, input_values, expected_output):
        with patch('builtins.input', side_effect=input_values):
            result = PromptMixin.prompt_board_size("Enter board size: ", "Invalid board size.")
            assert result == expected_output

    @pytest.mark.parametrize("input_value, expected_output", [(7, 7), (9, 9)])
    def test_custom_min_max_boundaries(self, input_value, expected_output):
        with patch('builtins.input', return_value=input_value):
            result = PromptMixin.prompt_board_size("Enter board size: ", "Invalid board size.", 6, 10)
            assert result == expected_output
