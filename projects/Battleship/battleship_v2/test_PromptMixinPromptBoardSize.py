# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=prompt_board_size_022845cd0e
ROOST_METHOD_SIG_HASH=prompt_board_size_a691f66c9b


Scenario 1: Valid Board Size
Details:
  TestName: test_valid_board_size
  Description: This test is intended to verify that the function returns the correct board size when the user inputs a valid board size.
Execution:
  Arrange: Mock the input function to return a valid board size within the min and max boundaries.
  Act: Invoke the function with a prompt message, error message, and the default min and max board size.
  Assert: Check that the returned board size is the same as the one mocked.
Validation:
  This test is important to ensure that the function correctly handles valid inputs and returns the correct board size as per the user's input.

Scenario 2: Invalid Board Size
Details:
  TestName: test_invalid_board_size
  Description: This test is intended to verify that the function continues to prompt the user for a valid board size when an invalid size is input.
Execution:
  Arrange: Mock the input function to return an invalid board size outside the min and max boundaries first, then a valid board size.
  Act: Invoke the function with a prompt message, error message, and the default min and max board size.
  Assert: Check that the returned board size is the valid one input after the invalid size.
Validation:
  This test is important to ensure that the function correctly handles invalid inputs by continuing to prompt the user until a valid board size is input.

Scenario 3: Non-integer Board Size
Details:
  TestName: test_non_integer_board_size
  Description: This test is intended to verify that the function continues to prompt the user for a valid board size when a non-integer size is input.
Execution:
  Arrange: Mock the input function to return a non-integer board size first, then a valid integer board size.
  Act: Invoke the function with a prompt message, error message, and the default min and max board size.
  Assert: Check that the returned board size is the valid integer input after the non-integer size.
Validation:
  This test is important to ensure that the function correctly handles non-integer inputs by continuing to prompt the user until a valid integer board size is input.

Scenario 4: Custom Min and Max Board Size
Details:
  TestName: test_custom_board_size_boundaries
  Description: This test is intended to verify that the function correctly uses custom min and max board size values.
Execution:
  Arrange: Mock the input function to return a board size within the custom boundaries. Set the min and max board size to custom values.
  Act: Invoke the function with a prompt message, error message, and the custom min and max board size.
  Assert: Check that the returned board size is the one input and is within the custom boundaries.
Validation:
  This test ensures that the function can correctly handle custom board size boundaries. This is important for the flexibility and adaptability of the game.
"""

# ********RoostGPT********
import pytest
from unittest.mock import patch
from utils import PromptMixin

class Test_PromptMixinPromptBoardSize:
    @pytest.mark.valid
    @patch('builtins.input', return_value='10')
    def test_valid_board_size(self, mock_input):
        assert PromptMixin().prompt_board_size('Enter board size: ', 'Invalid input.') == 10

    @pytest.mark.invalid
    @patch('builtins.input', side_effect=['20', '10'])
    def test_invalid_board_size(self, mock_input):
        assert PromptMixin().prompt_board_size('Enter board_size: ', 'Invalid input.') == 10

    @pytest.mark.invalid
    @patch('builtins.input', side_effect=['not an integer', '10'])
    def test_non_integer_board_size(self, mock_input):
        assert PromptMixin().prompt_board_size('Enter board size: ', 'Invalid input.') == 10

    @pytest.mark.valid
    @patch('builtins.input', return_value='25')
    def test_custom_board_size_boundaries(self, mock_input):
        assert PromptMixin().prompt_board_size('Enter board size: ', 'Invalid input.', 20, 30) == 25
