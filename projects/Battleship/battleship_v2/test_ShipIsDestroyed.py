# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=is_destroyed_e00e58a50b
ROOST_METHOD_SIG_HASH=is_destroyed_31fa257773


Scenario 1: Test if the ship is destroyed when all coordinates have been hit
Details:
  TestName: test_is_destroyed_when_all_coordinates_are_hit
  Description: This test validates that the function correctly identifies when a ship is destroyed. The ship is considered destroyed when all its coordinates have been hit.
Execution:
  Arrange: Initialize a ship object with a specific set of coordinates. Simulate hits by emptying the _un_hit_coordinates set.
  Act: Invoke the is_destroyed function on the ship object.
  Assert: Check that the function returns True.
Validation:
  This test is important to ensure that the function correctly identifies a destroyed ship. This is a key part of the game's logic, as determining when a ship is destroyed impacts the game's outcome.

Scenario 2: Test if the ship is not destroyed when some coordinates have not been hit
Details:
  TestName: test_is_destroyed_when_some_coordinates_are_not_hit
  Description: This test validates that the function correctly identifies when a ship is not destroyed. The ship is considered not destroyed when at least one of its coordinates has not been hit.
Execution:
  Arrange: Initialize a ship object with a specific set of coordinates. Simulate hits by removing some (but not all) coordinates from the _un_hit_coordinates set.
  Act: Invoke the is_destroyed function on the ship object.
  Assert: Check that the function returns False.
Validation:
  This test is important to ensure that the function correctly identifies a ship that is not yet destroyed. This is crucial to the game's progression, as a player's turn continues until they miss or destroy a ship.

Scenario 3: Test if the ship is not destroyed when no coordinates have been hit
Details:
  TestName: test_is_destroyed_when_no_coordinates_are_hit
  Description: This test validates that the function correctly identifies when a ship is not destroyed. The ship is considered not destroyed when none of its coordinates have been hit.
Execution:
  Arrange: Initialize a ship object with a specific set of coordinates. Do not simulate any hits, so the _un_hit_coordinates set remains full.
  Act: Invoke the is_destroyed function on the ship object.
  Assert: Check that the function returns False.
Validation:
  This test is important to ensure that the function correctly identifies a ship that has not been hit at all. This is necessary to correctly track the state of the game and the ships' statuses.
"""

# ********RoostGPT********
import sys
import pytest
from typing import Set, Tuple, List

# Add the parent directory of 'battleship_v2' to the system path
sys.path.append('../')

from battleship_v2.ship import Ship

class Test_ShipIsDestroyed:

    @pytest.mark.regression
    def test_is_destroyed_when_all_coordinates_are_hit(self):
        # Arrange
        ship = Ship([(1,1), (1,2), (1,3)])
        ship._un_hit_coordinates.clear()  # Simulate all coordinates being hit

        # Act
        result = ship.is_destroyed()

        # Assert
        assert result == True, "Ship should be destroyed when all coordinates have been hit"

    @pytest.mark.regression
    def test_is_destroyed_when_some_coordinates_are_not_hit(self):
        # Arrange
        ship = Ship([(1,1), (1,2), (1,3)])
        ship._un_hit_coordinates.remove((1,1))  # Simulate one coordinate being hit

        # Act
        result = ship.is_destroyed()

        # Assert
        assert result == False, "Ship should not be destroyed when some coordinates have not been hit"

    @pytest.mark.regression
    def test_is_destroyed_when_no_coordinates_are_hit(self):
        # Arrange
        ship = Ship([(1,1), (1,2), (1,3)])

        # Act
        result = ship.is_destroyed()

        # Assert
        assert result == False, "Ship should not be destroyed when no coordinates have been hit"
