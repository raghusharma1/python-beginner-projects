# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=is_destroyed_e00e58a50b
ROOST_METHOD_SIG_HASH=is_destroyed_31fa257773


Scenario 1: Test if the ship is destroyed when all coordinates have been hit
Details:
  TestName: test_is_destroyed_when_all_coordinates_are_hit
  Description: This test validates that the function is_destroyed returns True when all coordinates of the ship have been hit.
Execution:
  Arrange: Initialize a ship object with a set of coordinates. Then simulate hits on all coordinates, thereby emptying the _un_hit_coordinates set.
  Act: Invoke the function is_destroyed.
  Assert: Check that the function returns True.
Validation:
  This test is important as it verifies that the function correctly identifies when a ship is destroyed. According to the game rules, a ship is considered destroyed when all of its coordinates have been hit. This directly relates to the business requirement of correctly tracking the game state.

Scenario 2: Test if the ship is not destroyed when not all coordinates have been hit
Details:
  TestName: test_is_not_destroyed_when_some_coordinates_are_still_unhit
  Description: This test validates that the function is_destroyed returns False when there are still unhit coordinates of the ship.
Execution:
  Arrange: Initialize a ship object with a set of coordinates. Then simulate hits on some, but not all, coordinates, thereby leaving some tuples in the _un_hit_coordinates set.
  Act: Invoke the function is_destroyed.
  Assert: Check that the function returns False.
Validation:
  This test ensures that the function correctly identifies when a ship is not destroyed. This is crucial for the game as the ship should only be considered destroyed when all of its coordinates have been hit. This requirement is directly linked to the business requirement of accurately tracking the game state.

Scenario 3: Test if the ship is not destroyed when no coordinates have been hit
Details:
  TestName: test_is_not_destroyed_when_no_coordinates_are_hit
  Description: This test validates that the function is_destroyed returns False when none of the ship's coordinates have been hit.
Execution:
  Arrange: Initialize a ship object with a set of coordinates. No hits are simulated, leaving the _un_hit_coordinates set untouched.
  Act: Invoke the function is_destroyed.
  Assert: Check that the function returns False.
Validation:
  This test ensures that the function correctly identifies when a ship is not destroyed, even if no hits have been made. This is a necessary condition to ensure the game progresses correctly. This requirement is directly linked to the business requirement of accurately tracking the game state.
"""

# ********RoostGPT********
import pytest
from typing import Set, Tuple, List
from ship import Ship
from exceptions import InvalidHitMoveException, InvalidShipCoordinateException

class Test_ShipIsDestroyed:

    @pytest.mark.positive
    def test_is_destroyed_when_all_coordinates_are_hit(self):
        # Arrange
        ship = Ship([(1,1), (1,2), (1,3)])
        ship._un_hit_coordinates.clear()

        # Act
        result = ship.is_destroyed()

        # Assert
        assert result == True, "The ship should be destroyed when all coordinates are hit"

    @pytest.mark.negative
    def test_is_not_destroyed_when_some_coordinates_are_still_unhit(self):
        # Arrange
        ship = Ship([(1,1), (1,2), (1,3)])
        ship._un_hit_coordinates.remove((1,1))

        # Act
        result = ship.is_destroyed()

        # Assert
        assert result == False, "The ship should not be destroyed when some coordinates are still unhit"

    @pytest.mark.negative
    def test_is_not_destroyed_when_no_coordinates_are_hit(self):
        # Arrange
        ship = Ship([(1,1), (1,2), (1,3)])

        # Act
        result = ship.is_destroyed()

        # Assert
        assert result == False, "The ship should not be destroyed when no coordinates are hit"
