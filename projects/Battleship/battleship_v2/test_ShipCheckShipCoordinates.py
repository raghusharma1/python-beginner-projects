# ********RoostGPT********
"""
Test generated by RoostGPT for test test-py using AI Type  and AI Model 

ROOST_METHOD_HASH=_check_ship_coordinates_c13449afaa
ROOST_METHOD_SIG_HASH=_check_ship_coordinates_68182779b1


Scenario 1: Test for No Coordinates Provided
Details:
  TestName: test_ship_with_no_coordinates
  Description: This test is intended to verify that the function raises an InvalidShipCoordinateException when no coordinates are provided.
Execution:
  Arrange: Initialize a ship object with an empty list as the coordinates.
  Act: Call the _check_ship_coordinates() function.
  Assert: Check that an InvalidShipCoordinateException is raised with the correct error message.
Validation:
  This test is important as it verifies that a ship cannot be created without any coordinates, which is a critical business rule in the battleship game.

Scenario 2: Test for Negative Row Coordinate
Details:
  TestName: test_ship_with_negative_row_coordinate
  Description: This test is intended to verify that the function raises an InvalidShipCoordinateException when the ship's coordinates include a negative row value.
Execution:
  Arrange: Initialize a ship object with coordinates that include a negative row value.
  Act: Call the _check_ship_coordinates() function.
  Assert: Check that an InvalidShipCoordinateException is raised with the correct error message.
Validation:
  This test is important as it ensures that a ship cannot be placed on a negative row, which is not allowed in the game.

Scenario 3: Test for Negative Column Coordinate
Details:
  TestName: test_ship_with_negative_column_coordinate
  Description: This test is intended to verify that the function raises an InvalidShipCoordinateException when the ship's coordinates include a negative column value.
Execution:
  Arrange: Initialize a ship object with coordinates that include a negative column value.
  Act: Call the _check_ship_coordinates() function.
  Assert: Check that an InvalidShipCoordinateException is raised with the correct error message.
Validation:
  This test is important as it ensures that a ship cannot be placed on a negative column, which is not allowed in the game.

Scenario 4: Test for Non-Constant Rows and Columns
Details:
  TestName: test_ship_with_non_constant_row_and_column
  Description: This test is intended to verify that the function raises an InvalidShipCoordinateException when neither the rows nor the columns of the ship's coordinates are constant.
Execution:
  Arrange: Initialize a ship object with coordinates where neither the rows nor the columns are constant.
  Act: Call the _check_ship_coordinates() function.
  Assert: Check that an InvalidShipCoordinateException is raised with the correct error message.
Validation:
  This test is important as it ensures that a ship's position must be either horizontal or vertical, not diagonal or random.

Scenario 5: Test for Duplicate Coordinates
Details:
  TestName: test_ship_with_duplicate_coordinates
  Description: This test is intended to verify that the function raises an InvalidShipCoordinateException when the ship's coordinates include duplicates.
Execution:
  Arrange: Initialize a ship object with coordinates that include duplicates.
  Act: Call the _check_ship_coordinates() function.
  Assert: Check that an InvalidShipCoordinateException is raised with the correct error message.
Validation:
  This test is important as it ensures that a ship cannot occupy the same position more than once on the game board.

Scenario 6: Test for Non-Consecutive Rows or Columns
Details:
  TestName: test_ship_with_non_consecutive_rows_or_columns
  Description: This test is intended to verify that the function raises an AssertionError when the rows or columns of the ship's coordinates are not in consecutive order.
Execution:
  Arrange: Initialize a ship object with coordinates where the rows or columns are not in consecutive order.
  Act: Call the _check_ship_coordinates() function.
  Assert: Check that an AssertionError is raised with the correct error message.
Validation:
  This test is important as it ensures that the positions of a ship must be in consecutive order, representing the continuous structure of a ship.
"""

# ********RoostGPT********
import pytest
from typing import Set, Tuple, List
from exceptions import InvalidShipCoordinateException
from battleship_v2.ship import Ship

class Test_ShipCheckShipCoordinates:
    def test_ship_with_no_coordinates(self):
        with pytest.raises(InvalidShipCoordinateException) as excinfo:
            ship = Ship([])
            ship._check_ship_coordinates()
        assert str(excinfo.value) == "Cannot instantiate a ship without coordinates for it's position."

    def test_ship_with_negative_row_coordinate(self):
        with pytest.raises(InvalidShipCoordinateException) as excinfo:
            ship = Ship([(0, 0), (-1, 0)])
            ship._check_ship_coordinates()
        assert str(excinfo.value) == "One of the ship's coordinates have negative row value."

    def test_ship_with_negative_column_coordinate(self):
        with pytest.raises(InvalidShipCoordinateException) as excinfo:
            ship = Ship([(0, 0), (0, -1)])
            ship._check_ship_coordinates()
        assert str(excinfo.value) == "One of the ship's coordinates have negative column value."

    def test_ship_with_non_constant_row_and_column(self):
        with pytest.raises(InvalidShipCoordinateException) as excinfo:
            ship = Ship([(0, 0), (1, 1)])
            ship._check_ship_coordinates()
        assert str(excinfo.value) == "Neither the rows or columns have constant value."

    def test_ship_with_duplicate_coordinates(self):
        with pytest.raises(InvalidShipCoordinateException) as excinfo:
            ship = Ship([(0, 0), (0, 0)])
            ship._check_ship_coordinates()
        assert str(excinfo.value) == "There is a duplicate in one of the ship's coordinates."

    def test_ship_with_non_consecutive_rows_or_columns(self):
        with pytest.raises(AssertionError) as excinfo:
            ship = Ship([(0, 0), (0, 2)])
            ship._check_ship_coordinates()
        assert str(excinfo.value) == "The columns are not in consecutive order."
