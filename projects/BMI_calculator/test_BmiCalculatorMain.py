# ********RoostGPT********
"""
Test generated by RoostGPT for test python-5768-test2 using AI Type  and AI Model 

ROOST_METHOD_HASH=main_2e91109ffc
ROOST_METHOD_SIG_HASH=main_105191a9d8


BEGIN_GUIDELINE

```
Scenario 1: Test with valid height and weight
Details:
  TestName: test_valid_bmi_calculation
  Description: This test is intended to verify that the BMI calculation and interpretation is correct when valid height and weight are given.
Execution:
  Arrange: No setup is required as the function takes direct input from the user.
  Act: Invoke the function with a valid height and weight.
  Assert: The calculated BMI and its interpretation should match the expected outcome.
Validation:
  This test is important to ensure that the function is correctly calculating and interpreting BMI when given valid inputs.

Scenario 2: Test with zero height
Details:
  TestName: test_zero_height
  Description: This test is intended to verify that the function correctly handles a ZeroDivisionError when the height provided is zero.
Execution:
  Arrange: No setup is required as the function takes direct input from the user.
  Act: Invoke the function with height as zero and any valid weight.
  Assert: The function should return a message indicating that height should be greater than 0.
Validation:
  This test is important to ensure that the function is robust and can handle edge cases such as a zero height.

Scenario 3: Test with non-numeric inputs
Details:
  TestName: test_non_numeric_inputs
  Description: This test is intended to verify that the function correctly handles a ValueError when the inputs provided are not numeric.
Execution:
  Arrange: No setup is required as the function takes direct input from the user.
  Act: Invoke the function with non-numeric inputs for height and weight.
  Assert: The function should return a message indicating that the inputs should be numeric.
Validation:
  This test is important to ensure that the function can handle unexpected inputs and provide appropriate error messages.

Scenario 4: Test with negative inputs
Details:
  TestName: test_negative_inputs
  Description: This test is intended to verify that the function correctly handles negative inputs for height and weight.
Execution:
  Arrange: No setup is required as the function takes direct input from the user.
  Act: Invoke the function with negative inputs for height and weight.
  Assert: The function should return a message indicating that the inputs should be positive.
Validation:
  This test is important to ensure that the function can handle negative inputs, which are invalid in this context.

Scenario 5: Test the display of reference chart
Details:
  TestName: test_display_of_reference_chart
  Description: This test is intended to verify that the function correctly displays the reference chart from the csv file.
Execution:
  Arrange: The csv file should be present in the same location as the python script.
  Act: Invoke the function without any parameters.
  Assert: The function should print the reference chart in tabulated form.
Validation:
  This test is important to ensure that the function can read from a csv file and display the data in a tabulated form.
```
END_GUIDELINE
"""

# ********RoostGPT********
import pytest
import tabulate
import csv
from BMI_calculator.BMI_calculator import main, calculate_bmi, interpret_bmi, reference_chart

class Test_BmiCalculatorMain:

    @pytest.mark.valid
    def test_valid_bmi_calculation(self, monkeypatch):
        inputs = iter(["1.75", "70"])
        monkeypatch.setattr('builtins.input', lambda _: next(inputs))
        main()
        assert calculate_bmi(1.75, 70) == 22.86
        assert interpret_bmi(22.86) == "Your BMI is 22.86, you have a normal weight."

    @pytest.mark.invalid
    def test_zero_height(self, monkeypatch):
        inputs = iter(["0", "70"])
        monkeypatch.setattr('builtins.input', lambda _: next(inputs))
        main()
        assert calculate_bmi(0, 70) == None
        assert interpret_bmi(None) == "Invalid input. Height should be greater than 0."

    @pytest.mark.invalid
    def test_non_numeric_inputs(self, monkeypatch):
        monkeypatch.setattr('builtins.input', lambda _: "abc")
        with pytest.raises(ValueError):
            main()

    @pytest.mark.regression
    def test_display_of_reference_chart(self, monkeypatch):
        monkeypatch.setattr('builtins.input', lambda _: "")
        main()
        chart = reference_chart()
        assert chart is not None
        assert isinstance(chart, list)
        assert len(chart) > 0
