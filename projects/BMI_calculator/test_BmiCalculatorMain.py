# ********RoostGPT********
"""
Test generated by RoostGPT for test pythinunittesting2 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=main_2e91109ffc
ROOST_METHOD_SIG_HASH=main_105191a9d8


```
Scenario 1: Test for normal weight range
Details:
  TestName: test_bmi_normal_weight
  Description: This test verifies that the function correctly calculates and interprets the BMI for a person with normal weight.
Execution:
  Arrange: Initialize height and weight variables with values corresponding to a normal BMI (e.g., height=1.75m, weight=70kg).
  Act: Call the function calculate_bmi with the initialized variables and then interpret_bmi with the returned BMI.
  Assert: The returned message should indicate "you have a normal weight".
Validation:
  This test ensures that the function correctly handles the normal weight range, which is a crucial part of the BMI calculation and interpretation.

Scenario 2: Test for overweight range
Details:
  TestName: test_bmi_overweight
  Description: This test verifies that the function correctly calculates and interprets the BMI for a person who is overweight.
Execution:
  Arrange: Initialize height and weight variables with values corresponding to an overweight BMI (e.g., height=1.75m, weight=80kg).
  Act: Call the function calculate_bmi with the initialized variables and then interpret_bmi with the returned BMI.
  Assert: The returned message should indicate "you are overweight".
Validation:
  This test ensures that the function correctly handles the overweight range, which is an important part of the BMI calculation and interpretation.

Scenario 3: Test for underweight range
Details:
  TestName: test_bmi_underweight
  Description: This test verifies that the function correctly calculates and interprets the BMI for a person who is underweight.
Execution:
  Arrange: Initialize height and weight variables with values corresponding to an underweight BMI (e.g., height=1.75m, weight=50kg).
  Act: Call the function calculate_bmi with the initialized variables and then interpret_bmi with the returned BMI.
  Assert: The returned message should indicate "you are underweight".
Validation:
  This test ensures that the function correctly handles the underweight range, which is an essential part of the BMI calculation and interpretation.

Scenario 4: Test for zero height input
Details:
  TestName: test_bmi_zero_height
  Description: This test verifies that the function correctly handles a zero height input.
Execution:
  Arrange: Initialize height variable to zero and weight variable with any positive value.
  Act: Call the function calculate_bmi with the initialized variables and then interpret_bmi with the returned BMI.
  Assert: The returned message should indicate "Invalid input. Height should be greater than 0."
Validation:
  This test ensures that the function correctly handles invalid zero height input, which is a critical edge case in the BMI calculation.

Scenario 5: Test for negative weight input
Details:
  TestName: test_bmi_negative_weight
  Description: This test verifies that the function correctly handles a negative weight input.
Execution:
  Arrange: Initialize weight variable to a negative value and height variable with any positive value.
  Act: Call the function calculate_bmi with the initialized variables.
  Assert: The function should raise a ValueError as the weight cannot be negative.
Validation:
  This test ensures that the function correctly handles invalid negative weight input, which is a critical edge case in the BMI calculation.
```
"""

# ********RoostGPT********
import pytest
from BMI_calculator.BMI_calculator import calculate_bmi, interpret_bmi

class Test_BmiCalculatorMain:

    def test_bmi_normal_weight(self):
        height = 1.75
        weight = 70
        bmi = calculate_bmi(height, weight)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 22.86, you have a normal weight."

    def test_bmi_overweight(self):
        height = 1.75
        weight = 80
        bmi = calculate_bmi(height, weight)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 26.12, you are overweight."

    def test_bmi_underweight(self):
        height = 1.75
        weight = 50
        bmi = calculate_bmi(height, weight)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 16.33, you are underweight."

    def test_bmi_zero_height(self):
        height = 0
        weight = 70
        bmi = calculate_bmi(height, weight)
        result = interpret_bmi(bmi)
        assert result == "Invalid input. Height should be greater than 0."

    def test_bmi_negative_weight(self):
        height = 1.75
        weight = -70
        with pytest.raises(Exception) as e_info:
            bmi = calculate_bmi(height, weight)
