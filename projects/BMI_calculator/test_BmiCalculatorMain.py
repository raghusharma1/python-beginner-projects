# ********RoostGPT********
"""
Test generated by RoostGPT for test pythinunittesting2 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=main_2e91109ffc
ROOST_METHOD_SIG_HASH=main_105191a9d8


```
Scenario 1: Test for normal weight range
Details:
  TestName: test_normal_weight
  Description: This test is intended to verify that the function correctly calculates and interprets the BMI for a person of normal weight.
Execution:
  Arrange: We assume a person with a height of 1.75 meters and a weight of 70 kilograms. 
  Act: Invoke the calculate_bmi and interpret_bmi functions with the given height and weight.
  Assert: The expected outcome is a string stating "Your BMI is 22.86, you have a normal weight.".
Validation:
  This test is important to ensure that the function correctly identifies individuals within the normal weight range according to the BMI classification.

Scenario 2: Test for underweight range
Details:
  TestName: test_underweight
  Description: This test is intended to verify that the function correctly calculates and interprets the BMI for a person who is underweight.
Execution:
  Arrange: We assume a person with a height of 1.8 meters and a weight of 50 kilograms.
  Act: Invoke the calculate_bmi and interpret_bmi functions with the given height and weight.
  Assert: The expected outcome is a string stating "Your BMI is 15.43, you are underweight.".
Validation:
  This test is important to ensure that the function correctly identifies individuals who are underweight according to the BMI classification.

Scenario 3: Test for overweight range
Details:
  TestName: test_overweight
  Description: This test is intended to verify that the function correctly calculates and interprets the BMI for a person who is overweight.
Execution:
  Arrange: We assume a person with a height of 1.7 meters and a weight of 80 kilograms.
  Act: Invoke the calculate_bmi and interpret_bmi functions with the given height and weight.
  Assert: The expected outcome is a string stating "Your BMI is 27.68, you are overweight.".
Validation:
  This test is important to ensure that the function correctly identifies individuals who are overweight according to the BMI classification.

Scenario 4: Test for obese range
Details:
  TestName: test_obese
  Description: This test is intended to verify that the function correctly calculates and interprets the BMI for a person who is obese.
Execution:
  Arrange: We assume a person with a height of 1.6 meters and a weight of 90 kilograms.
  Act: Invoke the calculate_bmi and interpret_bmi functions with the given height and weight.
  Assert: The expected outcome is a string stating "Your BMI is 35.16, you are obese (Class I).".
Validation:
  This test is important to ensure that the function correctly identifies individuals who are obese according to the BMI classification.

Scenario 5: Test for height equal to zero
Details:
  TestName: test_zero_height
  Description: This test is intended to verify that the function handles the ZeroDivisionError correctly when the height is zero.
Execution:
  Arrange: We assume a person with a height of 0 meters and any weight.
  Act: Invoke the calculate_bmi and interpret_bmi functions with the given height and weight.
  Assert: The expected outcome is a string stating "Invalid input. Height should be greater than 0.".
Validation:
  This test is important to ensure that the function handles exceptions properly and returns meaningful error messages when the input data is invalid.
```

"""

# ********RoostGPT********
import pytest
from BMI_calculator.BMI_calculator import calculate_bmi, interpret_bmi

class Test_BmiCalculatorMain:
    @pytest.mark.regression
    def test_normal_weight(self):
        height = 1.75
        weight = 70
        bmi = calculate_bmi(height, weight)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 22.86, you have a normal weight."

    @pytest.mark.regression
    def test_underweight(self):
        height = 1.8
        weight = 50
        bmi = calculate_bmi(height, weight)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 15.43, you are underweight."

    @pytest.mark.regression
    def test_overweight(self):
        height = 1.7
        weight = 80
        bmi = calculate_bmi(height, weight)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 27.68, you are overweight."

    @pytest.mark.regression
    def test_obese(self):
        height = 1.6
        weight = 90
        bmi = calculate_bmi(height, weight)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 35.16, you are obese (Class I)."

    @pytest.mark.regression
    def test_zero_height(self):
        height = 0
        weight = 90
        bmi = calculate_bmi(height, weight)
        result = interpret_bmi(bmi)
        assert result == "Invalid input. Height should be greater than 0."
