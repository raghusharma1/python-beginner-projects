# ********RoostGPT********
"""
Test generated by RoostGPT for test pythinunittesting2 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=main_2e91109ffc
ROOST_METHOD_SIG_HASH=main_105191a9d8


```
Scenario 1: Test for normal weight range
Details:
  TestName: test_normal_weight
  Description: This test is intended to verify if the function correctly interprets the BMI for a person with normal weight.
Execution:
  Arrange: Prepare the test with a BMI value that falls within the normal weight range (18.5 - 24.9).
  Act: Invoke the interpret_bmi function with the prepared BMI value.
  Assert: The function should return a string stating that the person has a normal weight.
Validation:
  This test is crucial for ensuring that the function correctly interprets the BMI value and provides accurate feedback to the user.

Scenario 2: Test for overweight range
Details:
  TestName: test_overweight
  Description: This test is intended to verify if the function correctly interprets the BMI for a person who is overweight.
Execution:
  Arrange: Prepare the test with a BMI value that falls within the overweight range (25 - 29.9).
  Act: Invoke the interpret_bmi function with the prepared BMI value.
  Assert: The function should return a string stating that the person is overweight.
Validation:
  This test is crucial for ensuring that the function correctly interprets the BMI value and provides accurate feedback to the user.

Scenario 3: Test for obesity class I range
Details:
  TestName: test_obesity_classI
  Description: This test is intended to verify if the function correctly interprets the BMI for a person who is in obesity class I.
Execution:
  Arrange: Prepare the test with a BMI value that falls within the obesity class I range (30 - 34.9).
  Act: Invoke the interpret_bmi function with the prepared BMI value.
  Assert: The function should return a string stating that the person is in obesity class I.
Validation:
  This test is crucial for ensuring that the function correctly interprets the BMI value and provides accurate feedback to the user.

Scenario 4: Test for obesity class II range
Details:
  TestName: test_obesity_classII
  Description: This test is intended to verify if the function correctly interprets the BMI for a person who is in obesity class II.
Execution:
  Arrange: Prepare the test with a BMI value that falls within the obesity class II range (35 - 39.9).
  Act: Invoke the interpret_bmi function with the prepared BMI value.
  Assert: The function should return a string stating that the person is in obesity class II.
Validation:
  This test is crucial for ensuring that the function correctly interprets the BMI value and provides accurate feedback to the user.

Scenario 5: Test for obesity class III range
Details:
  TestName: test_obesity_classIII
  Description: This test is intended to verify if the function correctly interprets the BMI for a person who is in obesity class III.
Execution:
  Arrange: Prepare the test with a BMI value that falls within the obesity class III range (40 and above).
  Act: Invoke the interpret_bmi function with the prepared BMI value.
  Assert: The function should return a string stating that the person is in obesity class III.
Validation:
  This test is crucial for ensuring that the function correctly interprets the BMI value and provides accurate feedback to the user.

Scenario 6: Test for underweight range
Details:
  TestName: test_underweight
  Description: This test is intended to verify if the function correctly interprets the BMI for a person who is underweight.
Execution:
  Arrange: Prepare the test with a BMI value that falls within the underweight range (less than 18.5).
  Act: Invoke the interpret_bmi function with the prepared BMI value.
  Assert: The function should return a string stating that the person is underweight.
Validation:
  This test is crucial for ensuring that the function correctly interprets the BMI value and provides accurate feedback to the user.

Scenario 7: Test for invalid input (None)
Details:
  TestName: test_invalid_input
  Description: This test is intended to verify if the function correctly handles invalid input (None).
Execution:
  Arrange: Prepare the test with a BMI value of None.
  Act: Invoke the interpret_bmi function with the prepared BMI value.
  Assert: The function should return a string stating that the input is invalid.
Validation:
  This test is crucial for ensuring that the function correctly handles invalid input and provides a suitable error message to the user.
```

"""

# ********RoostGPT********
import pytest
from BMI_calculator.BMI_calculator import interpret_bmi, calculate_bmi, reference_chart

class Test_BmiCalculatorMain:

    @pytest.mark.regression
    @pytest.mark.valid
    def test_normal_weight(self):
        bmi = calculate_bmi(1.75, 70)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 22.86, you have a normal weight."

    @pytest.mark.regression
    @pytest.mark.valid
    def test_overweight(self):
        bmi = calculate_bmi(1.75, 80)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 26.12, you are overweight."

    @pytest.mark.regression
    @pytest.mark.valid
    def test_obesity_classI(self):
        bmi = calculate_bmi(1.75, 90)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 29.39, you are obese (Class I)."

    @pytest.mark.regression
    @pytest.mark.valid
    def test_obesity_classII(self):
        bmi = calculate_bmi(1.75, 100)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 32.65, you are obese (Class II)."

    @pytest.mark.regression
    @pytest.mark.valid
    def test_obesity_classIII(self):
        bmi = calculate_bmi(1.75, 110)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 35.92, you are obese (Class III)."

    @pytest.mark.regression
    @pytest.mark.valid
    def test_underweight(self):
        bmi = calculate_bmi(1.75, 60)
        result = interpret_bmi(bmi)
        assert result == "Your BMI is 19.59, you are underweight."

    @pytest.mark.regression
    @pytest.mark.invalid
    def test_invalid_input(self):
        bmi = calculate_bmi(0, 70)
        result = interpret_bmi(bmi)
        assert result == "Invalid input. Height should be greater than 0."
