# ********RoostGPT********
"""
Test generated by RoostGPT for test pythinunittesting2 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=interpret_bmi_784476e760
ROOST_METHOD_SIG_HASH=interpret_bmi_52ff0bc812


```
Scenario 1: Testing BMI interpretation for underweight category
Details:
  TestName: test_interpret_bmi_for_underweight
  Description: This test verifies that the function correctly identifies and classifies a BMI value that falls under the underweight category.
Execution:
  Arrange: No specific setup required.
  Act: Call the interpret_bmi function with a BMI value less than 18.5.
  Assert: The returned string should indicate that the individual is underweight.
Validation:
  This test validates the correct classification of underweight BMIs. This is crucial to ensure that the BMI interpretation is accurate as per health standards.

Scenario 2: Testing BMI interpretation for normal weight category
Details:
  TestName: test_interpret_bmi_for_normal_weight
  Description: This test verifies that the function correctly identifies and classifies a BMI value that falls under the normal weight category.
Execution:
  Arrange: No specific setup required.
  Act: Call the interpret_bmi function with a BMI value between 18.5 and 24.9.
  Assert: The returned string should indicate that the individual has a normal weight.
Validation:
  This test validates the correct classification of normal weight BMIs. Accurate classification is essential for correct health recommendations.

Scenario 3: Testing BMI interpretation for overweight category
Details:
  TestName: test_interpret_bmi_for_overweight
  Description: This test verifies that the function correctly identifies and classifies a BMI value that falls under the overweight category.
Execution:
  Arrange: No specific setup required.
  Act: Call the interpret_bmi function with a BMI value between 25 and 29.9.
  Assert: The returned string should indicate that the individual is overweight.
Validation:
  This test validates the correct classification of overweight BMIs. It is important for correct health advice and intervention.

Scenario 4: Testing BMI interpretation for various obesity classes
Details:
  TestName: test_interpret_bmi_for_obesity_classes
  Description: This test verifies that the function correctly identifies and classifies a BMI value that falls under the various obesity classes.
Execution:
  Arrange: No specific setup required.
  Act: Call the interpret_bmi function with a BMI value greater than 30.
  Assert: The returned string should correctly indicate the obesity class of the individual.
Validation:
  This test validates the correct classification of obesity classes. This is crucial for appropriate medical intervention and advice.

Scenario 5: Testing BMI interpretation for invalid input
Details:
  TestName: test_interpret_bmi_for_invalid_input
  Description: This test verifies that the function correctly handles invalid input.
Execution:
  Arrange: No specific setup required.
  Act: Call the interpret_bmi function with a None value.
  Assert: The returned string should indicate an invalid input.
Validation:
  This test validates the function's ability to handle invalid inputs, ensuring the robustness of the system.
```
"""

# ********RoostGPT********
import pytest
from BMI_calculator.BMI_calculator import interpret_bmi

@pytest.mark.regression
@pytest.mark.valid
def test_interpret_bmi_for_underweight():
    assert interpret_bmi(16) == "Your BMI is 16, you are underweight."

@pytest.mark.regression
@pytest.mark.valid
def test_interpret_bmi_for_normal_weight():
    assert interpret_bmi(22) == "Your BMI is 22, you have a normal weight."

@pytest.mark.regression
@pytest.mark.valid
def test_interpret_bmi_for_overweight():
    assert interpret_bmi(28) == "Your BMI is 28, you are overweight."

@pytest.mark.regression
@pytest.mark.valid
def test_interpret_bmi_for_obesity_classes():
    assert interpret_bmi(32) == "Your BMI is 32, you are obese (Class I)."
    assert interpret_bmi(36) == "Your BMI is 36, you are obese (Class II)."
    assert interpret_bmi(45) == "Your BMI is 45, you are obese (Class III)."

@pytest.mark.regression
@pytest.mark.invalid
def test_interpret_bmi_for_invalid_input():
    assert interpret_bmi(None) == "Invalid input. Height should be greater than 0."
