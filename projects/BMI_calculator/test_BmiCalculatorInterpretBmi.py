# ********RoostGPT********
"""
Test generated by RoostGPT for test python-5768-test2 using AI Type  and AI Model 

ROOST_METHOD_HASH=interpret_bmi_784476e760
ROOST_METHOD_SIG_HASH=interpret_bmi_52ff0bc812


BEGIN_GUIDELINE

Scenario 1: Test when BMI is None
Details:
  TestName: test_interpret_bmi_none_input
  Description: Verify the function's behavior when the input is None. This test is intended to validate the error handling of the function.
Execution:
  Arrange: No setup is required.
  Act: Call the function with None as the parameter.
  Assert: The function should return the string "Invalid input. Height should be greater than 0."
Validation:
  This test is important to ensure that the function handles None input correctly and gives an appropriate error message.

Scenario 2: Test when BMI is less than 18.5
Details:
  TestName: test_interpret_bmi_underweight
  Description: Verify the function's behavior when the input BMI is less than 18.5. This test is intended to validate the business logic of the function.
Execution:
  Arrange: No setup is required.
  Act: Call the function with a float less than 18.5 as the parameter.
  Assert: The function should return a string stating the person is underweight.
Validation:
  This test is important to ensure that the function correctly interprets a person's BMI as underweight when it's less than 18.5.

Scenario 3: Test when BMI is between 18.5 and 24.9
Details:
  TestName: test_interpret_bmi_normal_weight
  Description: Verify the function's behavior when the input BMI is between 18.5 and 24.9. This test is intended to validate the business logic of the function.
Execution:
  Arrange: No setup is required.
  Act: Call the function with a float that is between 18.5 and 24.9 as the parameter.
  Assert: The function should return a string stating the person has a normal weight.
Validation:
  This test is important to ensure that the function correctly interprets a person's BMI as normal weight when it's between 18.5 and 24.9.

Scenario 4: Test when BMI is between 25 and 29.9
Details:
  TestName: test_interpret_bmi_overweight
  Description: Verify the function's behavior when the input BMI is between 25 and 29.9. This test is intended to validate the business logic of the function.
Execution:
  Arrange: No setup is required.
  Act: Call the function with a float that is between 25 and 29.9 as the parameter.
  Assert: The function should return a string stating the person is overweight.
Validation:
  This test is important to ensure that the function correctly interprets a person's BMI as overweight when it's between 25 and 29.9.

Scenario 5: Test when BMI is between 30 and 34.9
Details:
  TestName: test_interpret_bmi_obese_class_I
  Description: Verify the function's behavior when the input BMI is between 30 and 34.9. This test is intended to validate the business logic of the function.
Execution:
  Arrange: No setup is required.
  Act: Call the function with a float that is between 30 and 34.9 as the parameter.
  Assert: The function should return a string stating the person is obese (Class I).
Validation:
  This test is important to ensure that the function correctly interprets a person's BMI as obese (Class I) when it's between 30 and 34.9.

Scenario 6: Test when BMI is between 35 and 39.9
Details:
  TestName: test_interpret_bmi_obese_class_II
  Description: Verify the function's behavior when the input BMI is between 35 and 39.9. This test is intended to validate the business logic of the function.
Execution:
  Arrange: No setup is required.
  Act: Call the function with a float that is between 35 and 39.9 as the parameter.
  Assert: The function should return a string stating the person is obese (Class II).
Validation:
  This test is important to ensure that the function correctly interprets a person's BMI as obese (Class II) when it's between 35 and 39.9.

Scenario 7: Test when BMI is greater than or equal to 40
Details:
  TestName: test_interpret_bmi_obese_class_III
  Description: Verify the function's behavior when the input BMI is greater than or equal to 40. This test is intended to validate the business logic of the function.
Execution:
  Arrange: No setup is required.
  Act: Call the function with a float that is 40 or more as the parameter.
  Assert: The function should return a string stating the person is obese (Class III).
Validation:
  This test is important to ensure that the function correctly interprets a person's BMI as obese (Class III) when it's 40 or more.

END_GUIDELINE
"""

# ********RoostGPT********
import pytest
from BMI_calculator import interpret_bmi

class Test_BmiCalculatorInterpretBmi:

    def test_interpret_bmi_none_input(self):
        assert interpret_bmi(None) == "Invalid input. Height should be greater than 0."

    def test_interpret_bmi_underweight(self):
        assert interpret_bmi(18.4) == "Your BMI is 18.4, you are underweight."

    def test_interpret_bmi_normal_weight(self):
        assert interpret_bmi(24.5) == "Your BMI is 24.5, you have a normal weight."

    def test_interpret_bmi_overweight(self):
        assert interpret_bmi(29.5) == "Your BMI is 29.5, you are overweight."

    def test_interpret_bmi_obese_class_I(self):
        assert interpret_bmi(34.5) == "Your BMI is 34.5, you are obese (Class I)."
        
    def test_interpret_bmi_obese_class_II(self):
        assert interpret_bmi(39.5) == "Your BMI is 39.5, you are obese (Class II)."
        
    def test_interpret_bmi_obese_class_III(self):
        assert interpret_bmi(40) == "Your BMI is 40, you are obese (Class III)."
