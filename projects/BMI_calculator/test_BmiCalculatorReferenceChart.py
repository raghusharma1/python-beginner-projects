# ********RoostGPT********
"""
Test generated by RoostGPT for test python-5768-test2 using AI Type  and AI Model 

ROOST_METHOD_HASH=reference_chart_789b62b9d3
ROOST_METHOD_SIG_HASH=reference_chart_0a10c8e9e3


-BEGIN_GUIDELINE-

Scenario 1: Test for the presence of 'bmi.csv' file
Details:
  TestName: test_file_presence
  Description: This test is intended to verify that the 'bmi.csv' file exists in the correct directory. 
Execution:
  Arrange: No specific arrangement needed.
  Act: Call the function reference_chart.
  Assert: Check if the file 'bmi.csv' exists.
Validation:
  This test is crucial because the function heavily relies on the 'bmi.csv' file for its operation. If the file does not exist, the function will not be able to perform as expected.

Scenario 2: Test for the correct reading of csv file
Details:
  TestName: test_csv_reading
  Description: This test is intended to verify that the csv file is read correctly and its content is stored in a list.
Execution:
  Arrange: Prepare a csv file with known data.
  Act: Call the function reference_chart.
  Assert: Check if the read data matches the known data from the csv file.
Validation:
  It is important to verify that the function reads the csv file correctly, as the function's output heavily depends on the data from the csv file.

Scenario 3: Test for correct tabulation of data
Details:
  TestName: test_data_tabulation
  Description: The test is intended to verify that the data from the csv file is correctly tabulated and displayed.
Execution:
  Arrange: Prepare a csv file with known data.
  Act: Call the function reference_chart.
  Assert: Check if the displayed tabulated data matches the known tabulated data from the csv file.
Validation:
  This test is crucial to ensure that the function displays the data in the correct tabulated format. The tabulated data should be in a human-readable format for the user.

Scenario 4: Test for handling of empty csv file
Details:
  TestName: test_empty_csv_handling
  Description: This test is intended to verify that the function handles an empty csv file correctly.
Execution:
  Arrange: Prepare an empty csv file.
  Act: Call the function reference_chart.
  Assert: Check if the function handles the empty csv file without throwing an error.
Validation:
  This test is important to ensure that the function can handle edge cases such as an empty csv file. It should preferably inform the user that the csv file is empty instead of throwing an error.

Scenario 5: Test for handling of csv file with incorrect data format
Details:
  TestName: test_incorrect_data_format_handling
  Description: This test is intended to verify that the function handles a csv file with incorrect data format correctly.
Execution:
  Arrange: Prepare a csv file with incorrect data format.
  Act: Call the function reference_chart.
  Assert: Check if the function handles the csv file with incorrect data format without throwing an error.
Validation:
  This test is important to ensure that the function can handle edge cases such as a csv file with incorrect data format. It should preferably inform the user that the data format is incorrect instead of throwing an error.

-END_GUIDELINE-
"""

# ********RoostGPT********
import pytest
import os
import csv
from tabulate import tabulate
from BMI_calculator.BMI_calculator import reference_chart

class Test_BmiCalculatorReferenceChart:

    @pytest.mark.regression
    def test_file_presence(self):
        assert os.path.isfile('bmi.csv')

    @pytest.mark.regression
    def test_csv_reading(self, tmpdir):
        p = tmpdir.mkdir("sub").join("bmi.csv")
        p.write('BMI,Weight Status\nUnderweight,Below 18.5')
        list2 = []
        with p.open() as file1:
            list1 = csv.reader(file1)
            for line in list1:
                list2.append(line)
        assert list2 == [['BMI', 'Weight Status'], ['Underweight', 'Below 18.5']]

    @pytest.mark.regression
    def test_data_tabulation(self, tmpdir):
        p = tmpdir.mkdir("sub").join("bmi.csv")
        p.write('BMI,Weight Status\nUnderweight,Below 18.5')
        list2 = []
        with p.open() as file1:
            list1 = csv.reader(file1)
            for line in list1:
                list2.append(line)
        expected_output = tabulate(list2[1:], headers=list2[0], tablefmt="fancy_grid")
        assert expected_output == '╒═════════════╤══════════════╕\n│ BMI         │ Weight Status │\n╞═════════════╪══════════════╡\n│ Underweight │ Below 18.5    │\n╘═════════════╧══════════════╛'

    @pytest.mark.negative
    def test_empty_csv_handling(self, tmpdir):
        p = tmpdir.mkdir("sub").join("bmi.csv")
        p.write('')
        with pytest.raises(Exception):
            reference_chart()

    @pytest.mark.negative
    def test_incorrect_data_format_handling(self, tmpdir):
        p = tmpdir.mkdir("sub").join("bmi.csv")
        p.write('123, abc')
        with pytest.raises(Exception):
            reference_chart()
